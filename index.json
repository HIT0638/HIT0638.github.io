[{"categories":["教程"],"content":"前言 折腾了半天，碰到了很多地雷和坑🤕。最后终于是完成了博客网站的创建。所以决定将整个配置流程以及可能遇到问题总结一下。于是有了这个网站的第一篇博客。😁😁 ","date":"2023-11-06","objectID":"/hugo-blog-tutorial/:0:0","tags":["GithubPage","Hugo","Blog"],"title":"GithubPage + Hugo博客配置教程（主题：LoveIt）","uri":"/hugo-blog-tutorial/"},{"categories":["教程"],"content":"0 基础介绍 ","date":"2023-11-06","objectID":"/hugo-blog-tutorial/:1:0","tags":["GithubPage","Hugo","Blog"],"title":"GithubPage + Hugo博客配置教程（主题：LoveIt）","uri":"/hugo-blog-tutorial/"},{"categories":["教程"],"content":"0.1 什么是Github Pages？ Github Pages 是一个可以从你的 Github 源码仓库中直接生成个人、组织或者项目页面的静态站点托管服务。 这些静态网页的托管和发布依托于Github，故称之为GithubPages. ","date":"2023-11-06","objectID":"/hugo-blog-tutorial/:1:1","tags":["GithubPage","Hugo","Blog"],"title":"GithubPage + Hugo博客配置教程（主题：LoveIt）","uri":"/hugo-blog-tutorial/"},{"categories":["教程"],"content":"0.2 什么是Hugo? Hugo 是一个用 Go 编写的快速静态网站生成器，具有极快的构建速度（每个页面小于1毫秒），拥有大量现成主题，在开发过程中通过 liveload 即时渲染更改，可以托管在任何平台，是一个理想的建站工具。 ","date":"2023-11-06","objectID":"/hugo-blog-tutorial/:1:2","tags":["GithubPage","Hugo","Blog"],"title":"GithubPage + Hugo博客配置教程（主题：LoveIt）","uri":"/hugo-blog-tutorial/"},{"categories":["教程"],"content":"0.3 网站总体搭建思路 创建两个github仓库： 源码仓库：储存博客源代码及数据。 GithubPages仓库：储存静态网页，并部署。 将在源码仓库中配置得到的静态网站文件部署到GitHubPages仓库中。 ","date":"2023-11-06","objectID":"/hugo-blog-tutorial/:1:3","tags":["GithubPage","Hugo","Blog"],"title":"GithubPage + Hugo博客配置教程（主题：LoveIt）","uri":"/hugo-blog-tutorial/"},{"categories":["教程"],"content":"前置能力 这篇教程假设你已经：\r\r 了解Git的基本知识并能使用。 有Github仓库并熟悉基础使用 了解一定的终端命令行知识 \r\r 正题 ","date":"2023-11-06","objectID":"/hugo-blog-tutorial/:1:4","tags":["GithubPage","Hugo","Blog"],"title":"GithubPage + Hugo博客配置教程（主题：LoveIt）","uri":"/hugo-blog-tutorial/"},{"categories":["教程"],"content":"预备工作 首先，我使用的是Hugo v0.92.2+extend版本。主题为LoveIt选了好久。 主题的仓库在这：https://github.com/dillonzq/LoveIt 接下来就进入正式的流程环节： 首先，我选择的方法是使用Hugo在本地配置静态网站后再推送到github上进行build以及部署，因此在这里我只会讲这种方法。当然还可以利用Git Action的workflow来在github上动态进行网站的配置和部署，因为我暂时没用这个方法，因此在这里不作介绍。 ","date":"2023-11-06","objectID":"/hugo-blog-tutorial/:2:0","tags":["GithubPage","Hugo","Blog"],"title":"GithubPage + Hugo博客配置教程（主题：LoveIt）","uri":"/hugo-blog-tutorial/"},{"categories":["教程"],"content":"1 创建仓库 我推荐创建两个github仓库，一个private仓库用来存放Hugo site的文件，另一个public仓库存放静态网站的文件，这样的话方便文件的管理。 我们首先来创建第一个private仓库： 创建完成后先不要管， 然后是第二个仓库： 注意\r\r\u003cusername\u003e.github.io的仓库名称的要求需要满足。\r\r ","date":"2023-11-06","objectID":"/hugo-blog-tutorial/:2:1","tags":["GithubPage","Hugo","Blog"],"title":"GithubPage + Hugo博客配置教程（主题：LoveIt）","uri":"/hugo-blog-tutorial/"},{"categories":["教程"],"content":"流程 ","date":"2023-11-06","objectID":"/hugo-blog-tutorial/:3:0","tags":["GithubPage","Hugo","Blog"],"title":"GithubPage + Hugo博客配置教程（主题：LoveIt）","uri":"/hugo-blog-tutorial/"},{"categories":["教程"],"content":"2 初始化Hugo site 首先，克隆刚刚创建的准备存放博客源文件的private仓库。 然后，进入该仓库（我的是blogsite），使用命令hugo new site xxxx得到一个新的hugo site框架。 如图： 紧接着进入刚刚创建的new site，我们可以看到，其基本框架如下所示： 各文件夹解释如下： archetypes：存放用 hugo 命令新建的 md 文件应用的 front matter 模版 content：存放内容页面，如 Blog layouts：存放定义网站的样式，写在layouts文件下的样式会覆盖安装的主题中的 layouts文件同名的样式 static：存放所有静态文件，如图片 data：存放创建站点时 Hugo 使用的其他数据 public：存放 Hugo 生成的静态网页 themes：存放主题文件 config.toml：网站配置文件 ","date":"2023-11-06","objectID":"/hugo-blog-tutorial/:3:1","tags":["GithubPage","Hugo","Blog"],"title":"GithubPage + Hugo博客配置教程（主题：LoveIt）","uri":"/hugo-blog-tutorial/"},{"categories":["教程"],"content":"3 下载并配置Hugo主题 3.1 下载Hugo主题 你可以在Hugo 社区或者其它github仓库中自行选择你喜欢的主题，并进行相应的配置。 但需要注意的是，你要弄清楚相应主题与你使用的Hugo的版本的适配情况（血的教训）😢😢。 我们下面进入刚刚创建的site目录，然后使用下面命令下载主题的相关文件。 # 位于你的site根目录 git clone https://github.com/dillonzq/LoveIt.git themes/LoveIt 下载完成之后，相应的主题内容会被下载到themes文件夹下，如图： 3.2 配置Hugo主题 不用太关注主题文件的细节（除非想学）。 简单的话只要看exampleSite文件夹，这个文件夹一般就是你在参考网站时的demo，因此我们可以直接利用这个文件夹来搭起我们网站的结构。 如何做？将exampleSite中的文件复制到site根目录下（重复的目录需要覆盖）。推荐这么做的原因是我们直接就能利用demo建立起自己可以运行的网站框架，后续只需要对demo进行修修改改即可。 移动后的根目录如下图所示： 其中，复制config.toml的时候需要注意： themes：修改themes参数为themesDir: \"themes\"，这是指明你的theme存放的位置。 baseURL：没有自己自定义域名的话，修改为baseURL = \"https://\u003cusername\u003e.github.io\"，将username修改为你自己的github用户名。 注意事项\r\r在进行第四步之前，先删除content/posts/theme-documentation-built-in-shortcodes文件夹中两个index文件内容的tweet部分，不然会报错。（下面的步骤我嫌麻烦直接把文件夹删了）\r\r ","date":"2023-11-06","objectID":"/hugo-blog-tutorial/:3:2","tags":["GithubPage","Hugo","Blog"],"title":"GithubPage + Hugo博客配置教程（主题：LoveIt）","uri":"/hugo-blog-tutorial/"},{"categories":["教程"],"content":"4 本地运行测试 经过以上步骤后，即可以进行本地运行，让我们来看一看现在的网站样子。 使用命令hugo server即可在本地运行，默认在1313端口。 当然也可以指定端口运行：hugo server -p 8888。 如图： 运行界面如下： ","date":"2023-11-06","objectID":"/hugo-blog-tutorial/:3:3","tags":["GithubPage","Hugo","Blog"],"title":"GithubPage + Hugo博客配置教程（主题：LoveIt）","uri":"/hugo-blog-tutorial/"},{"categories":["教程"],"content":"5 部署 部署在对应网址https://\u003cusername\u003e.github.io/的方法也很简单，总共分为两步。 利用hugo命令得到配置的静态文件： 运行完这个命令后，你会发现site的根目录下出现了一个public文件夹，这就是hugo运行所配置成功的静态网站文件，也就是我们要存放在刚刚创建的\u003cusername\u003e.github.io的github仓库中文件。 将public目录中的文件上传至对应Github仓库。 命令如下： # 进入public目录 cd public # 初始化git仓库 git init -b main # 连接远程仓库 git remote add origin https://github.com/HIT0638/HIT0638.github.io.git # 先将原本的内容同步 git pull --rebase origin main # 然后触发连招 git add . git commit -m 'xxx' git push origin main 一顿操作猛如虎后，就成功将public中的文件上传到了github仓库中去。 接下来我们打开仓库页面的Action，可以看到以下内容： 如果为绿色勾，则代表部署成功，然后我们就可以进入https://\u003cusername\u003e.github.io/看到网页的内容啦！ ","date":"2023-11-06","objectID":"/hugo-blog-tutorial/:3:4","tags":["GithubPage","Hugo","Blog"],"title":"GithubPage + Hugo博客配置教程（主题：LoveIt）","uri":"/hugo-blog-tutorial/"},{"categories":["教程"],"content":"6 后续 还记得第一个创建的private仓库吗？ 现在轮到它登场了，我们用它保存我们的源文件，故在其.gitignore下忽略掉public中的内容，然后push到仓库中去即可。 6.1 周而复始的生活 再次以后，每当需要更新网站时，就只需要重复以下步骤： 更新内容 hugo更新public文件 将public文件上传到GitPage仓库 同步更新源文件仓库 即可。 ","date":"2023-11-06","objectID":"/hugo-blog-tutorial/:3:5","tags":["GithubPage","Hugo","Blog"],"title":"GithubPage + Hugo博客配置教程（主题：LoveIt）","uri":"/hugo-blog-tutorial/"},{"categories":["教程"],"content":"更多相关的用法笔记 待更新… 结语 在自己动手尝试的过程中，可能会遇到各种各样的错误和问题，也经常会出现\"怎么照着做也会错\"的情况。 每个人都是如此。但只要有不怕挫折，勇于钻研问题的精神和毅力，无论任何艰难险阻都能克服。 ","date":"2023-11-06","objectID":"/hugo-blog-tutorial/:4:0","tags":["GithubPage","Hugo","Blog"],"title":"GithubPage + Hugo博客配置教程（主题：LoveIt）","uri":"/hugo-blog-tutorial/"},{"categories":["计算机网络"],"content":"前言 这里用来记录我计算机网络学习以及复习过程中的笔记。 由于本人才疏学浅，故部分陈述的错误难以避免。烦请大家发现错误或者疑问之后在评论区或者邮件告知我，感激不尽。 正题 ","date":"2023-11-07","objectID":"/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E7%AC%94%E8%AE%B0/:0:0","tags":["计算机网络","学习笔记"],"title":"计算机网络-笔记-PPT知识梳理(更新中)","uri":"/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E7%AC%94%E8%AE%B0/"},{"categories":["计算机网络"],"content":"ppt知识梳理 ","date":"2023-11-07","objectID":"/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E7%AC%94%E8%AE%B0/:1:0","tags":["计算机网络","学习笔记"],"title":"计算机网络-笔记-PPT知识梳理(更新中)","uri":"/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E7%AC%94%E8%AE%B0/"},{"categories":["计算机网络"],"content":"应用层 HTTP 不同主机进程间通信依靠socket，寻址依赖（IP, PORT）。 对象的寻址依赖于URL，如{www.hit.edu}(host anme){/images/pic.png}(path name)。 记住，HTTP协议是无状态协议。 HTTP1.0 非持久连接，一个TCP连接传一个对象；HTTP1.1 持久连接。 非持久性连接通信的过程。需要注意的点包括建立连接需要一个RTT，html文件请求到接收到消息前几个字节需要一个RTT，一个html文件包含的对象也一样，另外还有文件/对象发送时间。 故total=2*RTT+文件发送时间。 持久性：流水线机制，理想情况下，建立连接1RTT，html文件1RTT，收到所有引用对象1RTT，再加上所有文件的发送时间。 Cookie Cookie建立过程以及原理。 原理： 无cookie的客户端向web服务器发送http请求-\u003e服务器为其设置cookie-\u003e返回带cookie头部行的http响应信息。 cookie文件保存在客户端主机，由浏览器管理。 cookie文件对应的数据也就是用户数据保存在web服务器端数据库。 当client在次发送包含cookie头部行的请求时，web服务器可以根据cookie来获取对应的用户数据，而产生对该用户的记忆。而无需用户每次请求都需要输入相关信息。 Web缓存/代理服务器 Web缓存/代理服务器 原理： 将请求的Web数据缓存在缓存/代理服务器中。当进行Web访问时，先在缓存/代理服务器中寻找。如果失效或者没有，则正常进行http请求；否则直接转发缓存对象给客户端。 使用缓存时，用包含if-modified-since来想Web服务器获取缓存状态。如果缓存版本最新，则会接收到HTTP/1.0 304 Not Modified，否则不会，说明不是最新。 Email Email应用 其构件包括邮件客户端user agent，邮寄服务器email server以及SMTP协议。 注意的是，邮件的发送和接收是在email server上发生的，user agent仅仅将邮件送到server或者从server拉取邮件。 mail server用邮箱存储接收道德email，同时有一个消息队列存储等待发送的email。 SMTP SMTP需要注意的如下： 是一个‘推’协议，只能将邮件从mail server发送到server，不能被user agent用来从邮箱中‘拉取’邮件。 用TCP，25端口。 email信息格式： header： to: from: subjetc: body：msg （写着玩的，大概率不考） 那如何拉取邮件？有如POP，IMAP或者使用HTTP的163,QQ Mail等。 DNS 关于DNS，需要注意的是： 应用层协议 多层命名，分布式数据库。 功能是将域名解析为IP地址 几层域名的功能：根-\u003e顶级-\u003e权威（-\u003e本地）。 同理，主机不自行完成解析任务，本地域名服务器完成后将结果转发给主机。 DNS缓存 DNS协议包括查询query和恢复reply信息，信息格式相同。 P2P \u0026 文件分发 P2P架构 这部分要掌握的就是端系统之间直接通信，没有传统意义上的服务器。另外可能出现的计算题是C/S架构和P2P架构的文件分发时间。 举个栗子，一个服务器向N个节点分发一个文件，文件size为F，服务器上传带宽为$u_s$，节点i上传带宽和下载带宽分别为$u_i$和$d_i$。 则如果使用C/S架构，那么分发该文件到N节点的时间$$d_{cs}=max{\\frac{NF}{u_s},\\frac{F}{min(d_i)}}$$ 因为服务器要上传N个文件副本，故有$\\frac{NF}{u_s}$的耗时；同时，该过程中还有节点的下载时间，如果最慢下载时间比上传N个副本时间都长，那么就有$\\frac{F}{min(d_i)}$。 如果使用P2P架构，那么该过程中涉及的操作及其时间包括‘服务器必须发送一个副本’，客户机i下载时间，总共需要的文件下载时间。故时间$$d_{P2P}=max{\\frac{F}{u_s},\\frac{F}{min(d_i)},\\frac{NF}{(u_s+\\sum{u_i})}}$$ 另外，关于P2P，还有很重要的一点就是其“索引”。 在P2P中，搜索信息指的是查找网络上的文件或资源。为什么？因为P2P没有中央服务器，因此节点需要通过P2P网络上的其它机制来发现和定位数据。 P2P系统的索引 P2P系统的索引： 这个‘索引’是名词，它是一个映射表，记录文件/资源和它们所在节点的位置（IP+PORT）之间的关系。这个索引可以是分布式的，分散在网络的多个节点。 例如，在文件共享系统中，索引会动态跟踪那些节点共享了哪些文件。节点加入网络并想要共享文件时，首先需要告知索引自己的文件列表。当需要找某个文件时，则在索引中搜素具有该文件的节点信息，并从这些节点中下载文件。 或者在如QQ这样的即时消息系统中，索引的作用是将用户名和账号映射到实际的网络位置。 具体实现包括：集中式索引、洪泛式查询Query flooding、层次式覆盖网络。 文件分发：BitTorrent，以256KB的chunk对数据进行分发，tit-for-tat. ","date":"2023-11-07","objectID":"/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E7%AC%94%E8%AE%B0/:1:1","tags":["计算机网络","学习笔记"],"title":"计算机网络-笔记-PPT知识梳理(更新中)","uri":"/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E7%AC%94%E8%AE%B0/"},{"categories":["计算机网络"],"content":"传输层 传输层要掌握什么？ 理解传输层服务基本理论和基本机制： 复用/分用; 可靠数据传输机制; 流量控制机制； 拥塞控制机制。 掌握Internet的传输层协议： UDP; TCP; TCP拥塞控制。 概述 传输层为不同主机的进程提供逻辑上端到端的通信。与网络层比较来说，网络层是提供主机之间的逻辑通信机制。而传输层是提供应用进程之间的逻辑通信机制。 我们主要掌握两个Internet传输层协议，分别是可靠按序的TCP和Best-effort（尽力而为）的UDP。 多路复用和多路分用 我觉得这部分要理解‘多路’和‘复用’‘分用’体现在哪里，需要首先知道没有多路复用或者分用的情况。 在计算机网络中，对于一个主机来说，物理上可能只有一条网络连接，比如一个网线或者一个无线连接。如果没有多路复用，那么你的主机可能就只有一条单一的通信线路，即每个应用程序都需要有一个物理的网络连接才能进行通信，这样造成效率低下、成本增加等问题。如果没有多路分用，则各数据到达设备时，没有端口号来识别数据应该传给哪个应用程序。并且造成应用程序冲突。 因此，多路复用就体现在将单一的网络连接通道被化为逻辑上的多路通道进行复用，主要完成的工作是每个应用程序数据发送请求被赋予一个唯一的端口号，传输层使用端口号来区分不同的应用程序。当数据包被发送到网络时，每个包都会包含这个端口号，以此来标记它属于哪个应用程序。 而多路分用呢则是当各数据包到达设备时，传输层查看每个数据包的‘目的端口号’，如何根据端口号将数据发送给绑定该端口的对应应用程序。成功正确的完成数据的接收和转发。 核心知识点就在于如何标识数据包使得发送方和接收方都能成功分析并完成正确的数据传输。具体就是‘端口号’的设置。 UDP \u0026 TCP in 多路复用/分用 同时，根据连接存在情况可以分为无连接的分用UDP和有连接的TCP。 无连接：UDP发送时被Socket用二元组（目的IP，目的PORT）来进行标识。主机收到UDP后，根据段中的目的PORT来进行向上层的转交。转交的依据仅参考目的PORT，这意味着来自不同源IP和源端口号的IP数据包会被导向同一个Socket。 有连接：TCP的Socket用四元组（源IP，源PORT，目的IP，目的PORT）来标识。 UDP很简单，因此它带来的优点也是头部开少，又因为没有拥塞控制，故应用可更好的控制发送时间和速率。 对UDP，主要注意以下特点： 基于Internet IP协议，有简单的错误校验（checksum） ‘Best effort’尽力交付服务，UDP段可能丢失或错序到达。 无连接，无需握手。 常用于如流媒体应用一样能够容忍丢失，速率敏感的应用。因为UDP无需握手等繁杂步骤，因此发送速率快于TCP。 UDP还用于DNS、SNMP等应用层协议。 通过在应用层加可靠机制和错误恢复机制可以实现UDP的可靠数据传输。 UDP校验和（checksum）的计算方法：将段内容视为多个16-bit整数。对所有整数求和后（进位加在后面）按位取反，得到校验和。接收方对接受的段计算校验和后与校验和字段比较，相等则大概率无错；否则错误，丢弃。 可靠数据传输 可靠数据传输需要达到的目标是数据传输的不错（检错纠错机制）、不丢（重传机制）、不乱（序号、缓存机制）。 关于rdt1.0到rdt3.0的发展过程不做赘述，具体查看PDF文档 #embed-pdf-container { position: relative; width: 100%; height: auto; min-height: 20vh; } .pdf-canvas { border: 1px solid black; direction: ltr; width: 100%; height: auto; display: none; } #the-canvas { border: 1px solid black; direction: ltr; width: 100%; height: auto; display: none; } .pdf-loadingWrapper { display: none; justify-content: center; align-items: center; width: 100%; height: 350px; } .pdf-loading { display: inline-block; width: 50px; height: 50px; border: 3px solid #d2d0d0;; border-radius: 50%; border-top-color: #383838; animation: spin 1s ease-in-out infinite; -webkit-animation: spin 1s ease-in-out infinite; } #overlayText { word-wrap: break-word; display: grid; justify-content: end; } #overlayText a { position: relative; top: 10px; right: 4px; color: #000; margin: auto; background-color: #eeeeee; padding: 0.3em 1em; border: solid 2px; border-radius: 12px; border-color: #00000030; text-decoration: none; } #overlayText svg { height: clamp(1em, 2vw, 1.4em); width: clamp(1em, 2vw, 1.4em); } @keyframes spin { to { -webkit-transform: rotate(360deg); } } @-webkit-keyframes spin { to { -webkit-transform: rotate(360deg); } } Previous Next     / [pdf] View the PDF file here. (function(){ var url = '计算机网络-笔记\\/rdt.pdf'; var hidePaginator = \"\" === \"true\"; var hideLoader = \"\" === \"true\"; var selectedPageNum = parseInt(\"5\") || 1; var pdfjsLib = window['pdfjs-dist/build/pdf']; if (pdfjsLib.GlobalWorkerOptions.workerSrc == '') pdfjsLib.GlobalWorkerOptions.workerSrc = \"https:\\/\\/HIT0638.github.io\\/\" + 'js/pdf-js/build/pdf.worker.js'; var pdfDoc = null, pageNum = selectedPageNum, pageRendering = false, pageNumPending = null, scale = 3, canvas = document.getElementById('pdf-canvas-9a5afc42'), ctx = canvas.getContext('2d'), paginator = document.getElementById(\"pdf-paginator-9a5afc42\"), loadingWrapper = document.getElementById('pdf-loadingWrapper-9a5afc42'); showPaginator(); showLoader(); function renderPage(num) { pageRendering = true; pdfDoc.getPage(num).then(function(page) { var viewport = page.getViewport({scale: scale}); canvas.height = viewport.height; canvas.width = viewport.width; var renderContext = { canvasContext: ctx, viewport: viewport }; var renderTask = page.render(renderContext); renderTask.promise.then(function() { pageRendering = false; showContent(); if (pageNumPending !== null) { renderPage(pageNumPending); pageNumPending = null; } }); }); document.getElementById('pdf-pagenum-9a5afc42').textContent = num; } function showContent() { loadingWrapper.style.display = 'none'; canvas.style.display = 'block'; } function showLoader() { if(h","date":"2023-11-07","objectID":"/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E7%AC%94%E8%AE%B0/:1:2","tags":["计算机网络","学习笔记"],"title":"计算机网络-笔记-PPT知识梳理(更新中)","uri":"/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E7%AC%94%E8%AE%B0/"},{"categories":["计算机网络"],"content":"TCP 概述 TCP是实现可靠数据传输的服务，基于IP层提供的不可靠服务。 我觉得需要注意的点有： 全双工，同一连接中能传输双向数据流 拥塞控制以及流量控制 TCP段结构中，需要注意的是序列号seq和确认号ack。因为进行的是全双工通信，所以双方需要用seq和ack来互相同步数据的双向传输。 seq的作用是表明‘我’本次发送的数据的第一个字节的编号（不一定从0开始，建立TCP连接时，双方随机选择序列号）。ack的作用是表示'我‘下一个希望接收（你的）到的下一个字节的序号，其实就是我希望你发送的数据的起始字节是哪个。同时，由于TCP使用累计确认的方式，该ack序列号之前的所有字节均已正确接受。 TCP可靠数据传输 主要包括这些点： 流水线机制。 累计确认。 TCP使用单一重传定时器。 触发重传的事件包括超时和收到重复ACK。 注意几点，1是超时时间（RTO）的计算，2是累计确认方式，3是TCP的重传机制。 RTO的计算 TCP会计算每次数据传输的RTT，并且利用该RTT来更新超时时间，我们假设每次测量到的RTT为$SampleRTT$，则RTO计算公式如下： $$RTO = EstimatedRTT + 4 \\times DevRTT$$ $$EstimatedRTT = (1-\\alpha)\\times EstimatedRTT + \\alpha \\times SampleRTT, \\alpha 典型值为0.125$$ $$DevRTT = (1-\\beta) \\times DevRTT + \\beta \\times |SampleRTT - EstimatedRTT|$$ EstimatedRTT是平滑RTT，为了避免临时网络波动的影响，故采用加权移动平均（EWMA）算法来计算更平滑的RTT。 DevRTT衡量了RTT的波动程度，反映网络中的不稳定性。 累计确认 累计确认的工作原理是： 接收方不必对每个单独的数据包发送确认，而是可以在收到多个数据包后，发送一个确认信息，表明它已经接收到所有序号小于或等于某个特定值的数据包。这意味着累计确认是对所有前面连续的数据包的确认。 TCP重传 TCP只设置1个定时器，并且超时后只会重传1个分组，这个分组是还没有被确认的最早的一个分组。 当这个分组被成功接收，并且接收方返回了一个累积确认后，发送方才会知道之后的分组是否也在传输过程中丢失。如果累积确认的序号增加了，那么发送方会推断出之后的分组也被成功接收了。如果没有，那么发送方可能需要继续重传后续的分组，但这通常会发生在随后的超时事件之后。 流量控制 流量控制部分很简单，就是一个速度匹配机制。通过限制sender窗口大小来控制流量。 Receiver通过在Segment的头部字段将RcvWindow告诉Sender-\u003eSender根据RcvWindow来限制自己的能够发送的数据数量，即已经发送但还未收到ACK的数据多少。 TCP的连接管理 TCP的连接管理包括TCP连接的建立和关闭，即三次握手和四次挥手。 三次握手（TCP连接建立）： 第一次握手：客户端发送一个带有SYN（同步序列编号）标志的TCP段到服务器以开始一个新的连接。 第二次握手：服务器接收到SYN后，回送一个带有SYN/ACK标志的TCP段作为应答。 第三次握手：最后，客户端发送一个带有ACK标志的TCP段来确认这个响应 这个过程，双方在建立连接的过程中同步了seq和ack序列号。 如图： 四次挥手（TCP连接关闭）： 第一次挥手：当通信的一方完成其数据发送任务后，它会发送一个带有FIN标志的TCP段来关闭连接。 第二次挥手：另一方接收到这个FIN后，会发送ACK来确认收到了连接释放请求。 第三次挥手：接收FIN的一方等到其所有待发送的数据都发送完毕后，也会发送一个FIN来指示它也准备关闭连接了。 第四次挥手：最初发送FIN的一方在收到这个FIN后，发送一个ACK来确认，然后等待足够长的时间确保另一方收到了这个ACK，最后关闭连接。 如图： 拥塞控制 TCP采用端系统的拥塞控制，主要概念包括： 慢启动 拥塞避免 快重传 快恢复 过程总结如下： 当拥塞窗口（CongWin）小于阈值时，发送方处于慢启动阶段，窗口呈指数增长。 当拥塞窗口大于阈值时，发送方进入拥塞避免阶段，窗口呈线性增长。 当发生三个重复的ACK时，阈值设置为拥塞窗口的一半，拥塞窗口设置为阈值，进入状态’拥塞避免‘。 当发生超时时，阈值设置为拥塞窗口的一半，拥塞窗口设置为1个最大段大小（MSS）。 各含义解释如下： 状态 事件 TCP发送方动作 注释 慢启动 (SS) 收到对之前未确认数据的确认(ACK) CongWin = CongWin + MSS, 如果 (CongWin \u003e 阈值) 则状态设置为 “拥塞避免” 导致每个RTT拥塞窗口翻倍 拥塞避免 (CA) 收到对之前未确认数据的确认(ACK) CongWin = CongWin + MSS * (MSS/CongWin) 加性增加，导致每个RTT拥塞窗口增加1个MSS SS 或 CA 通过三个重复的ACK检测到丢失事件 阈值 = CongWin/2, CongWin = 阈值, 状态设置为 “拥塞避免” 快速恢复，实现乘法减小。拥塞窗口不会下降至低于1个MSS SS 或 CA 超时 阈值 = CongWin/2, CongWin = 1 MSS, 状态设置为 “慢启动” 进入慢启动 ","date":"2023-11-07","objectID":"/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E7%AC%94%E8%AE%B0/:1:3","tags":["计算机网络","学习笔记"],"title":"计算机网络-笔记-PPT知识梳理(更新中)","uri":"/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E7%AC%94%E8%AE%B0/"},{"categories":["计算机网络"],"content":"网络层 \u0026 数据链路层 网络层和数据链路层的数据我是手写的，有时间了再慢慢码字上传。 ","date":"2023-11-07","objectID":"/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E7%AC%94%E8%AE%B0/:1:4","tags":["计算机网络","学习笔记"],"title":"计算机网络-笔记-PPT知识梳理(更新中)","uri":"/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E7%AC%94%E8%AE%B0/"},{"categories":["计算机网络"],"content":"数据链路层 链路层协议如何实现？链路层协议的实现依赖于“适配器”，即网络接口卡-NIC及其驱动。另外，物理层协议也是由网卡实现的。 在物理层面上依赖于网卡以及各种软硬件。 以太网网卡：802.11网卡；以太网芯片组 如图是网卡间的通信： MAC协议 MAC（multiple access control）协议，即多路访问控制协议，是用来确保多结点能正确在共享广播信道上传输数据的协议。 首先要知道有两类链路： 点对点链路 拨号接入的PPP 以太网交换机和主机之间的点对点链路 广播链路（共享介质） 早期总线以太网 802.11无线局域网 在单一共享广播信道上传输时，若出现两个或两个以上结点同时传输的情况，则会出现数据传输的干扰；另外，若结点同时接收到两个或者多个信号，则会产生冲突，导致接受失败。 MAC协议的分类 信道划分MAC协议 多路复用技术 TDMA（时分）、FDMA（频分）、CDMA（码分）、WDMA… 随机访问MAC协议 信道不划分，允许冲突；并采用冲突恢复机制来控制结点的访问。 ALOHA，时隙ALOHA、、CSMA、CSMA/CD、CSMA\\CA 轮转MAC协议 结点轮流使用信道 主结点轮询；令牌传递 MAC地址 互联网中的每一个网卡都有一个唯一的MAC地址。 以太网 以太网是一种局域网技术。 局域网技术\r\r局域网技术一般专注于OSI模型的底层，也就是数据链路层和物理层。 局域网技术通常不涉及网络层及以上层次的事务，如路由选择、数据分段、会话管理等，这些是由更高层的网络协议（如IP协议）来处理的。局域网的设计通常假设网络中的所有设备都在同一个广播域中，这意味着它们可以直接通过数据链路层通信，而无需进行复杂的路由决策。\r\r 以下是需要注意的点： 以太网提供无连接、不可靠的服务，如没有握手过程，差错帧直接丢弃等。 以太网的MAC协议使用二进制指数退避算法的CSMA/CD。 以太网帧结构 以太网的帧结构如图： 包括前导码、源/目的MAC地址、上层协议类型、数据以及CRC循环冗余校验码。 交换机 以太网交换机包含以下四个特点： 属于链路层设备：进行存储转发以太帧；利用CSMA/CD访问链路。 透明：主机感知不到交换机的存在。 即插即用。 自学习。 交换表 \u0026 自学习 每个交换机都有一个交换表，表项格式如： (主机MAC地址，到达主机的接口，时间戳) 如图： 同时，交换机采用自学习来获知转发信息的策略： 当收到帧时，交换机通过帧的源MAC地址，学习到**该主机位于接收到该帧接口的LAN网段。**然后将发送主机MAC地址/接口记录到交换表中。 若交换机接收到的帧所标识的目的MAC地址不在表项中，则使用泛洪法（向除接收到该帧的接口之外的所有接口转发）来进行学习。 总而言之，交换机自学习和转发的过程可以被概括为：泛洪与选择性转发。 另 默认传统的二层交换机只划分冲突域，只实现数据交换功能。 三层交换机具有VLAN、数据交换以及路由功能；但三层交换机的路由功能与路由器的路由功能不太一样。三层交换机的路由主要是为VLAN之间的通信服务的。因为如果是使用实现VLAN的二层交换机，此时如果要进行两个VLAN之间的通信，则需要再加上一个路由器设备来进行不同VLAN之间的路由，这样的话成本高并且麻烦；因此，三层交换机中加入的路由功能就是为了解决这个问题。 NAT NAT呢？ NAT（Network Address Translation，网络地址转换）。用于作为私网（专用网络）和公网通信的中介。当在专用网内部的一些主机本来已经分配到了本地IP地址（即仅在本专用网内使用的专用地址），但现在又想和因特网上的主机通信（并不需要加密）时，可使用NAT方法。 所有使用本地地址的主机在和外界通信时，都要在NAT路由器上将其本地地址转换成全球IP地址，才能和因特网连接。 NAT的功能： NAT不仅能解决了lP地址不足的问题，而且还能够有效地避免来自网络外部的攻击，隐藏并保护网络内部的计算机。把内网的私有地址，转化成外网的公有地址。使得内部网络上的（被设置为私有IP地址的）主机可以访问Internet。 NAT分为哪几种？ NAT可以分为Basic NAT和PAT： Basic NAT只转化IP，不映射端口。 PAT除了转化IP，还做端口映射，可以用于多个内部地址映射到少量（甚至一个）外部地址。 NAT还可以分为静态NAT和动态NAT： 静态NAT，将内部网络中的每个主机都永久映射成外部网络中的某个合法的地址，多用于服务器 动态NAT，则是在外部网络中定义了一个或多个合法地址，采用动态分配的方法映射到内部网络。 ","date":"2023-11-07","objectID":"/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E7%AC%94%E8%AE%B0/:1:5","tags":["计算机网络","学习笔记"],"title":"计算机网络-笔记-PPT知识梳理(更新中)","uri":"/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E7%AC%94%E8%AE%B0/"},{"categories":["计算机网络"],"content":"物理层 物理层部分的知识点可以被整理为以下几个部分： 数据通信基础，就是一些基础概念+宏观通信过程以及同步通信和异步通信。 物理介质，就是一些介质，没什么好说的。 信道与信道容量，信道分类和两个信道容量计算公式吧。 基带传输，基带传输的概念和一些特征，然后就是很多码。 频带传输，频带概念、特性，然后加上一些调制方法。 物理层接口规程，这没什么好说的。 数据通信基础 如图是数据通信的宏观视角，包括包含的组成部分以及部分过程： 我直接把概念搬过来吧： 信源：将消息转换为信号的设备，如计算机等。 发送设备：将信源产生的信号进行适当的变换装置，使之适合于在信道中传输。主要包括编码和调制。 信道：信号传输通道，如物理介质。 噪声：自然界和通信设备中所产生的干扰。 接收设备：完成发送设备反变换，还原原始发送信号。 信宿：信号终点，将信号转换为供人们能识别的消息。 数据 (data)：传送消息的实体。 信号 (signal)：数据的电气的或电磁的 表示： “模拟的 ”(analogous)：参数的取值是 连续的 “数字的 ”(digital)：参数的取值是 离散的 码元 (code)：信号基本波形（信号基本单元 频带 (Spectrum)：信号频率范围 带宽 (Bandwidth)：有效带宽 数据通信方式 ：单工、半双工、全双工 并行通信 vs 串行 通信 异步通信和同步通信 然后是异步通信和同步通信。我认为这部分的理解很重要。 同步和异步的主要区别在于是否需要时钟对齐。 对于同步通信来说，其特点是进行连续串行传输数据的通信方式，一次通信只能传送一帧的信息。这里的一帧通常包括若干数据字符。 同步通信在每个数据分组的开始都要加上同步字符，而且由于同步传输不允许有间隙，在没有信息传输时要填上空字符。为了保障时钟的同步，在数据中需要嵌入时钟信号来保证传输过程中时钟的同步。 而异步通信不考虑时钟同步，收发双方可以有自己的时钟；在异步通信中，发送方每次只发送一个字符，并且发送方所发送的字符之间的时间间隔是任意的；这就意味着接受端必须时刻做好接收数据的准备。 因此，异步通信采取的方式是：以RS232协议规定为例，异步通信每次只发送一个字符，传输字符时，用‘起始位’（低电平，逻辑值0）标识字符传输的开始，然后紧接着是一个字符的比特，最后以‘停止位’（高电平，逻辑值1）结束。字符数据由5~8位组成，后接1位校验位。 接收方空闲时，会将保持高电平，因此当接收到起始位低电平0时会有一个下跳沿。此时标志着异步通信字符传输开始。 信源编码 信源编码就是将信源产生的模拟数据（连续）编码为数字数据（离散）。典型的方法是PCM。 物理介质 这块应该不考。感兴趣的看文档。 信道与信道容量 信道分类 狭义上的信道只包括信号传输介质。广义上的信道将通信系统的一些变换装置也算作信道的一部分。如发送/接收设备、天线和调制器等。 信道容量 首先是信道容量的概念： 信道容量指信道无差错传输信息的最大平均信息速率。 如何计算呢？对于无噪声和有噪声的信道，分别有公式来计算信道容量。 理想的无噪声信道使用奈奎斯特信道容量公式来计算信道容量： $$C=2B\\log_2(M)$$ 其中，C是信道容量，单位是bps；B是信道带宽，单位是Hz；M是信号状态数。这计算的是理想信道的极限容量。 例题： 有噪声信道的使用香农信道容量公式来计算信道容量：$$C=Blog_2(1+\\frac{S}{N})$$ 其中$\\frac{S}{N}$是信噪比，也就是信号能力与噪声能量之比，通常以分贝(dB) 为单位：$$(\\frac{S}{N})_{dB} = 10 log_⑩(\\frac{信号能量}{噪声能量})$$ 例题： 基带传输基础 什么是基带信号？ 基带信号指的是信源发出的原始电信号；比如模拟信源或数字信源发出的原始电信号就分别叫做模拟基带信号和数字基带信号。 基带信号中包含较多低频成分，因此基带信号适合在具有低通特性的有线信道中传播，不适合无线信道。 典型的数字基带信号码型包括： 单极不归零码。 双极不归零码。 单极归零码。 双极归零码。 差分码。 AMI码。 双相码。 nBmB码。 具体看文档。 频带传输基础 为了在不具有低通特性带通信道中传输信号，只能将基带信号进行调制，得到与对应信道传输特性匹配的载波信号来进行信息的传输；即通过在信道中传送经过调制的载波信号实现将基带信号携带的信息传送出去。 带通信道\r\r带通信道（Bandpass Channel）是指一种特定类型的通信信道，它允许一个特定频率范围内的信号通过，同时阻止低于和高于这个范围的频率。这个频率范围被称为带宽。带通信道常用于无线通信系统，如无线网络、广播和手机通信等，因为它们可以减少不同信号之间的干扰，确保信号的清晰传输。 带桶信道如无线信道等不具有低通特性。\r\r 名词补充\r\r利用模拟基带信号调制载波，称为 模拟调制 。 利用数字基带信号调制载波，称为 数字调制。\r\r 数字调制系统 见文档。 ","date":"2023-11-07","objectID":"/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E7%AC%94%E8%AE%B0/:1:6","tags":["计算机网络","学习笔记"],"title":"计算机网络-笔记-PPT知识梳理(更新中)","uri":"/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E7%AC%94%E8%AE%B0/"},{"categories":["计算机网络"],"content":"前言 这篇博客的内容就用于记录我在学习以及复习过程中关于题目以及错题知识点的总结吧，会根据我的学习进度一直更新直到考试结束。 正题 ","date":"2023-11-07","objectID":"/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E5%81%9A%E9%A2%98%E7%AC%94%E8%AE%B0/:0:0","tags":["计算机网络","做题笔记"],"title":"计算机网络 做题笔记(更新中)","uri":"/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E5%81%9A%E9%A2%98%E7%AC%94%E8%AE%B0/"},{"categories":["计算机网络"],"content":"网络层 ","date":"2023-11-07","objectID":"/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E5%81%9A%E9%A2%98%E7%AC%94%E8%AE%B0/:1:0","tags":["计算机网络","做题笔记"],"title":"计算机网络 做题笔记(更新中)","uri":"/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E5%81%9A%E9%A2%98%E7%AC%94%E8%AE%B0/"},{"categories":["计算机网络"],"content":"王道-IPv4 为了方便起见，部分选择题如果内容抄写太繁琐，我会直接列出我认为要掌握的知识点，具体题目可以去参考王道原书。 Internet网络层含有4个重要的协议，分别为（IP，ICMP，ARP，RARP） IP分组结构中，需要弄清的一点是协议字段以及版本字段的含义。协议字段表示使用IP的上层协议，比如值6表示TCP，17表示UDP。而版本字段才代表IP协议的版本，4代表IPv4，6代表IPv6。 IPv4协议首部中有三个字段与长度有关，分别是首部长度、总长度和片偏移。其基本单位分为别4B，1B和8B。IP分组首部长度必须是4B的倍数，取值范围5-15，默认为5. IP分组中检验字段检查范围是分组首部。 IP分组头中与分片及组装相关的字段是：标识、标志和片偏移。标识用于标识分片/分组所在数据报，标志标识分片情况（MF、DF）。 当接收到的分组DF=1，并且分组长度超过MTU时，直接丢弃分组并使用ICMP差错报文报告源主机。当DF=0时进行分片。 在分类的IP网络中，主机位全0表示网络号，全1表示广播地址。 假定采用默认子网掩码，下列可以分配给主机的ip地址是（B）： A. 192.46.10.0 B. 110.47.10.0 C. 127.10.10.17 D. 211.60.256.21 笔记\r\r由于并未使用CIDR，故判断192.46.10.0为C类地址，由于其主机位全0，故为广播地址。 127.10.10.17是会还测试保留地址。D语法错误，没有256 。B判断为A类地址，网络号为110，主机号为47.10.0.\r\r 对于使用前缀方式来表示的网络号，例如198.90.10.0/27。其子网掩码所覆盖的前缀数字不可变，剩余的位数可以在根据具体情况划分为子网号+主机号。例如对于198.90.10.0/27，剩余5位，主机号至少需要2位，故最多可以再划分为8个子网。只划分1个子网，剩余5位全为主机号，则一个子网最多可以有32-2=30个有效IP地址。 笔记\r\r对于这个题，只能这么解释。首先不难看出该地址为C类地址，因此前3字节为网络号。其次，一般情况下，一台主机在一个子网下只会配置一个该子网下的IP地址，这样做的原因之一是为了避免IP地址冲突。当然，在技术上是可以实现分同一网段下两个IP地址的，但是这样会带来很多麻烦。故可以认为，一般情况下，一台主机在一个网段中只被分配一个该网段下的IP。\r\r 注意：使用“斜线记法”，即如192.168.10.0/27的，均是使用CIDR，斜线记法又叫CIDR记法。 笔记\r\rCIDR地址块由\u003c网络前缀\u003e\u003c主机号\u003e两部分构成，并且由\u003c网络前缀\u003e唯一标识。具有相同网络前缀的IP地址属于同一个地址块。故在本题中，该地址块前缀为20位，主机位12位，故该地址块192.168.0.0/20中的地址数为2^12个，当所有位全为0时，取最小地址。全为1时，取最大地址。（此处不是取有效IP地址） 第二问只需要判断前28位前缀是否相同就行。 \r\r IP分组可以在传输的任意点如源主机、路由器被分片，但只会在目的主机进行重组。 笔记\r\r选A。但其实，数据报在任意网络的传输过程中，每一跳都需要更改源以及目的MAC地址。因为在数据链路层上，索引是根据MAC地址来的，IP只是在宏观上定义任意主机的位置，最终在链路传输层面，每一跳的MAC地址都要更新，更新源MAC地址为当前MAC地址，更新目的MAC地址为下一跳的MAC地址。\r\r ","date":"2023-11-07","objectID":"/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E5%81%9A%E9%A2%98%E7%AC%94%E8%AE%B0/:1:1","tags":["计算机网络","做题笔记"],"title":"计算机网络 做题笔记(更新中)","uri":"/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E5%81%9A%E9%A2%98%E7%AC%94%E8%AE%B0/"},{"categories":["软件架构"],"content":"前言 本篇介绍的相关内容概括\r\r 数据流风格的基本概念，包括构件、连接件以及拓扑结构。 管道-过滤器风格的概念、组成及特征介绍 管道-过滤器风格的应用介绍（以KWIC为例） \r\r 正题 ","date":"2023-11-07","objectID":"/softwarearch-%E6%95%B0%E6%8D%AE%E6%B5%81%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8%E9%A3%8E%E6%A0%BC/:0:0","tags":["软件架构","架构风格"],"title":"Software-Arch 数据流\u0026事件驱动风格(更新中)","uri":"/softwarearch-%E6%95%B0%E6%8D%AE%E6%B5%81%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8%E9%A3%8E%E6%A0%BC/"},{"categories":["软件架构"],"content":"1 数据流风格概述 首先介绍一下数据流风格的构件以及连接件。 数据流风格的基本构件是数据处理模块，其包含一个输入端口和一个输出端口。 构件从输入端口读取数据后，在模块内利用其计算模型对接收到的数据进行计算/处理，然后通过输出端口将数据输出，利用连接件到达下一个构件或者直接输出。 如上图所示，当数据到达后，构件便开始工作（一旦接收到可用数据就开始工作，而不是等待数据接受完毕）。 数据流风格的连接件的核心是数据流，其实现方式包括但不限于管道等。 一个数据流连接件包含输入和输出接口，也就是reader和writer。其基本功能是将数据从一个构件/处理的端口传送到另一个处理的输入端口。但需要注意的是，数据流连接件必须是单向的，根据实现的不同也能具有异步、缓冲的能力。而且，连接件不能进行数据的计算以及处理，其承担的角色只是一个单纯的数据搬运工。 如上图所示，连接件提供了数据的缓存以及reader和writer的异步。实现了一边读一边写的功能。 接收前一个构件输入的数据，然后将数据输出给目标构件。 最后，数据流风格由于其构件驱动取决于数据流的流动，并且整个架构的核心在于数据流，故其在拓扑结构上并无特别限制，可以是任意拓扑结构的图。 综上所述，我们对数据流风格作一个宏观上的直观理解： 如上图所示，在数据流风格架构中，其总体的处理操作可以被概括为： 数据到达时被激活，无数据时不工作。 但注意，这个数据是可用的数据，当可用数据到达时，各模块才开始工作。 ","date":"2023-11-07","objectID":"/softwarearch-%E6%95%B0%E6%8D%AE%E6%B5%81%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8%E9%A3%8E%E6%A0%BC/:1:0","tags":["软件架构","架构风格"],"title":"Software-Arch 数据流\u0026事件驱动风格(更新中)","uri":"/softwarearch-%E6%95%B0%E6%8D%AE%E6%B5%81%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8%E9%A3%8E%E6%A0%BC/"},{"categories":["软件架构"],"content":"2 管道-过滤器风格 ","date":"2023-11-07","objectID":"/softwarearch-%E6%95%B0%E6%8D%AE%E6%B5%81%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8%E9%A3%8E%E6%A0%BC/:2:0","tags":["软件架构","架构风格"],"title":"Software-Arch 数据流\u0026事件驱动风格(更新中)","uri":"/softwarearch-%E6%95%B0%E6%8D%AE%E6%B5%81%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8%E9%A3%8E%E6%A0%BC/"},{"categories":["论文阅读"],"content":"论文地址：https://www.aminer.cn/pub/60da8fc20abde95dc965f7f0/a-structure-self-aware-model-for-discourse-parsing-on-multi-party-dialogues ","date":"2023-11-08","objectID":"/a-structure-self-aware-model-for-discourse-parsing-on-multi-party-dialogues/:0:0","tags":["论文阅读","深度学习"],"title":"A Structure Self-Aware Model for Discourse Parsing on Multi-Party Dialogues","uri":"/a-structure-self-aware-model-for-discourse-parsing-on-multi-party-dialogues/"},{"categories":["论文阅读"],"content":"0. Summary This paper introduces a “Structure Self-Aware Model for Discourse Parsing on Multi-Party Dialogues.” The feature of this model is its edge-centric approach (in this task, an edge refers to an EDU pair). It updates the information of the EDU pair layer by layer, which avoids error propagation caused by using historical prediction information during the training process. Additionally, the model uses structural distillation to enhance its expressive power, achieving better performance. This is the first paper to use Graph Neural Networks (GNN) in the discourse parsing task, making it worth referencing. ","date":"2023-11-08","objectID":"/a-structure-self-aware-model-for-discourse-parsing-on-multi-party-dialogues/:1:0","tags":["论文阅读","深度学习"],"title":"A Structure Self-Aware Model for Discourse Parsing on Multi-Party Dialogues","uri":"/a-structure-self-aware-model-for-discourse-parsing-on-multi-party-dialogues/"},{"categories":["论文阅读"],"content":"1. Research Objective The research objective of this paper is to address the issue of error propagation found in previous work and to find an edge-centric GNN approach to improve the performance of discourse parsing tasks. ","date":"2023-11-08","objectID":"/a-structure-self-aware-model-for-discourse-parsing-on-multi-party-dialogues/:2:0","tags":["论文阅读","深度学习"],"title":"A Structure Self-Aware Model for Discourse Parsing on Multi-Party Dialogues","uri":"/a-structure-self-aware-model-for-discourse-parsing-on-multi-party-dialogues/"},{"categories":["论文阅读"],"content":"2. Method Model overview: From the picture, we can see that the entire model can be divided into 3 parts: ","date":"2023-11-08","objectID":"/a-structure-self-aware-model-for-discourse-parsing-on-multi-party-dialogues/:3:0","tags":["论文阅读","深度学习"],"title":"A Structure Self-Aware Model for Discourse Parsing on Multi-Party Dialogues","uri":"/a-structure-self-aware-model-for-discourse-parsing-on-multi-party-dialogues/"},{"categories":["论文阅读"],"content":"2.1 Hierarchical GRU The paper first employs a hierarchical GRU consisting of two bidirectional GRUs. The first bidirectional GRU takes each EDU, denoted as $x_i$, as its input and generated a local EDU representation $h_i$. The second bidirectional GRU operates on the sequence $h^l_0,h^l_1,\\dots,h^l_n$ to derive global, context-aware EDU representations for the dialogue, represented as $H^g = [h^g_0,h^g_1,\\dots,h^g_n]$. ","date":"2023-11-08","objectID":"/a-structure-self-aware-model-for-discourse-parsing-on-multi-party-dialogues/:3:1","tags":["论文阅读","深度学习"],"title":"A Structure Self-Aware Model for Discourse Parsing on Multi-Party Dialogues","uri":"/a-structure-self-aware-model-for-discourse-parsing-on-multi-party-dialogues/"},{"categories":["论文阅读"],"content":"2.2 SSA-GNN In the SSA-GNN stage, the primary features consist of the node representation $u_i$ and the representation of each EDU pair $(x_i, x_j)$, denoted as $r_{ij}$. The principal objective of the SSA-GNN is to learn the implicit structural information within the input dialogue. Furthermore, the SSA-GNN is an edge-centric GNN. Let’s first take a look at the update equation for this part: the node representation: The paper perform Structure-Aware($r_{ij}$) Scaled Dot-Product Attention ($\\alpha_{ij}$)operation to update the node hidden states. The paper directly use $H^g$ as the initial node representation $u^{(0)}$. Meanwhile, the paper adopt a GRU-style gating mechanism to update the edge representation $r^{(t)}{ij}$: The paper form the initial vector representations $r^{(0)}{ij}$ by concatenating three learnable embeddings: $s_{ij}$: indicating whether $x_i$ and $x_j$ are from the same speaker. $t_{ij}$: meaning whether $x_i$ and $x_j$ are continuous utterances of the same speaker. $d_{ij}$: denoting the relative distance between $x_i$ and $x_j$. It’s worth noting that the edge-centri characteristics of the SSA-GNN model proposed in the paper are reflected in the fact that all relevant information in the data ultimately gets aggregated into $r_{ij}$. Furthermore, in subsequent steps like link prediction and relation classification are made based on the edge representation. ","date":"2023-11-08","objectID":"/a-structure-self-aware-model-for-discourse-parsing-on-multi-party-dialogues/:3:2","tags":["论文阅读","深度学习"],"title":"A Structure Self-Aware Model for Discourse Parsing on Multi-Party Dialogues","uri":"/a-structure-self-aware-model-for-discourse-parsing-on-multi-party-dialogues/"},{"categories":["论文阅读"],"content":"2.3 Link Prediction \u0026 Relation Classification During T times of the updating process in SSA-GNN, the top-layer hidden state will be used for conversational discourse parsing. For each EDU $x_j$ precedes $x_i$ in the dialogue, the paper adopts $\\widehat{R_{i,j}}=[r^{(T)}{ij};r^{T}{ji}]$. This concatenated vector of $r^{T}{ij}$ and $r^{T}{ji}$ is the used to conduct link prediction and relation classification. ","date":"2023-11-08","objectID":"/a-structure-self-aware-model-for-discourse-parsing-on-multi-party-dialogues/:3:3","tags":["论文阅读","深度学习"],"title":"A Structure Self-Aware Model for Discourse Parsing on Multi-Party Dialogues","uri":"/a-structure-self-aware-model-for-discourse-parsing-on-multi-party-dialogues/"},{"categories":["论文阅读"],"content":"2.4 Loss Function The desigh of the loss function in this paper is also worth noting. Given the traing data $D$, the training objective is designed like this: !()[https://pic.imgdb.cn/item/6532516dc458853aefad6dda.png] 2.4.1 Discourse Parsing Loss $L_{ce}$ the $L_{ce}$ is the standard loss term of conversational discourse parsing based on cross entropy, which meant to gurantee the acurracy of link prediction and relation classification. 2.4.2 Relation Recognition Loss $L_{cls}$ The $L_{cls}$ is designed to make the edge hidden states of every layer can effectively capture all discourse relations. In short, the aim is to enhance the information-gathering capability of each layer in the model: where $T$ is the layer number of SSA-GNN. Why did the author set up such a loss function? Because the standard loss function $L_{ce}$ needs to be propagated to the last layer before any backpropagation occurs to update the parameters, which may result in weaker “supervision” for the earlier layers. In contrast, this function directly participates in the supervision of each layer, thereby optimizing the parameter updates for each layer more effectively. 2.4.3 Structure Distillation Loss $L_{skd}$ Method: Utilize a structure-aware teacher model to enhance the training effectiveness of the student model(our model). Features: The teacher model takes the entire dialogue and all “gold standard” relations, except for the one being predicted, as additional inputs. Why use a Teacher Model?：The standard loss function $L_{ce}$ may weaken the “supervision” of the earlier layers during backpropagation to update parameters. Using a teacher model allows for more direct involvement in the supervision of each layer. ","date":"2023-11-08","objectID":"/a-structure-self-aware-model-for-discourse-parsing-on-multi-party-dialogues/:3:4","tags":["论文阅读","深度学习"],"title":"A Structure Self-Aware Model for Discourse Parsing on Multi-Party Dialogues","uri":"/a-structure-self-aware-model-for-discourse-parsing-on-multi-party-dialogues/"},{"categories":["论文阅读"],"content":"4. Evaluation ","date":"2023-11-08","objectID":"/a-structure-self-aware-model-for-discourse-parsing-on-multi-party-dialogues/:4:0","tags":["论文阅读","深度学习"],"title":"A Structure Self-Aware Model for Discourse Parsing on Multi-Party Dialogues","uri":"/a-structure-self-aware-model-for-discourse-parsing-on-multi-party-dialogues/"},{"categories":["论文阅读"],"content":"4.1 Baselines DeepSequential DeepSequential(NS) that does not use any features from already predicted discourse structures DeepSequential(Share) HGRU Results: ","date":"2023-11-08","objectID":"/a-structure-self-aware-model-for-discourse-parsing-on-multi-party-dialogues/:4:1","tags":["论文阅读","深度学习"],"title":"A Structure Self-Aware Model for Discourse Parsing on Multi-Party Dialogues","uri":"/a-structure-self-aware-model-for-discourse-parsing-on-multi-party-dialogues/"},{"categories":["论文阅读"],"content":"4.2 Abation Study HGRU+SSA(FixEdgeRep) HGRU+SSA(NodeRep) HGRU+SSA(ShareEdgeRep) HGRU+SSA+$L_*$ HGRU+SSA(Teacher) ","date":"2023-11-08","objectID":"/a-structure-self-aware-model-for-discourse-parsing-on-multi-party-dialogues/:4:2","tags":["论文阅读","深度学习"],"title":"A Structure Self-Aware Model for Discourse Parsing on Multi-Party Dialogues","uri":"/a-structure-self-aware-model-for-discourse-parsing-on-multi-party-dialogues/"},{"categories":["论文阅读"],"content":"5. Notes The edge-centric SSA-GNN used in this paper has been enlightening for me, as it takes a unique approach—using edge representation for link prediction and relation classification. In previous research, the focus has often been node-centric, relying on information between nodes for processing. Perhaps there are even more hidden advantages to this edge-based approach? It’s something worth exploring. Traditional node-centric methods only perform backpropagation after the final layer, which weakens the supervision of prior information and also leads to layer-by-layer error propagation. The method in this paper avoids this situation by utilizing a loss function and an edge-centric mechanism. [!note]+ Teacher Model The Teacher model is a pre-trained, high-performing model that serves to guide or “teach” another (usually simpler) model, known as the “student model.” Through a process called knowledge distillation, the teacher model can transfer information to the student model. Compared to the student model, the teacher model often has access to more data or has a more complex structure. By leveraging the knowledge distillation from the teacher model, the student model can achieve sufficient performance while being more lightweight. [!note]+ Ablation Study Ablation experiments involve removing certain parts of a model or altering specific settings one by one to observe how these changes impact the model’s performance. The purpose is to better understand which components or settings are crucial for the model’s effectiveness. ","date":"2023-11-08","objectID":"/a-structure-self-aware-model-for-discourse-parsing-on-multi-party-dialogues/:5:0","tags":["论文阅读","深度学习"],"title":"A Structure Self-Aware Model for Discourse Parsing on Multi-Party Dialogues","uri":"/a-structure-self-aware-model-for-discourse-parsing-on-multi-party-dialogues/"},{"categories":["论文阅读"],"content":"论文地址：A Deep Sequential Model for Discourse Parsing on Multi-Party Dialogues ","date":"2023-11-08","objectID":"/a-deep-sequential-model-for-discourse-parsing-on-multi-party-dialogues/:0:0","tags":["论文阅读","深度学习"],"title":"A Deep Sequential Model for Discourse Parsing on Multi-Party Dialogues","uri":"/a-deep-sequential-model-for-discourse-parsing-on-multi-party-dialogues/"},{"categories":["论文阅读"],"content":"0. Summary This paper introduces a deep sequential model to address some limitations of existing methods in discourse parsing for multi-party dialogues. These limitations arise from the pipeline framework commonly employed in previous studies. On one hand, the pipeline framework lacks global information, affecting the probability estimation for each dependency relation between two EDUs. On the other hand, separating the steps of dependency prediction and dialogue structure construction inhibits information sharing between them, leading to suboptimal model performance. To mitigate these issues, the deep sequential model employs GRUs to obtain both local and global representations of EDUs. Coupled with the Speaker Highlighting Mechanism, this model achieves state-of-the-art performance in link prediction and relation classification compared to prior work. ","date":"2023-11-08","objectID":"/a-deep-sequential-model-for-discourse-parsing-on-multi-party-dialogues/:1:0","tags":["论文阅读","深度学习"],"title":"A Deep Sequential Model for Discourse Parsing on Multi-Party Dialogues","uri":"/a-deep-sequential-model-for-discourse-parsing-on-multi-party-dialogues/"},{"categories":["论文阅读"],"content":"1. Research Objective This paper introduces a deep sequential model to address certain limitations of existing methods in discourse parsing for multi-party dialogues. This model focuses on the global information of EDUs and highlights the speaker for each utterance. ","date":"2023-11-08","objectID":"/a-deep-sequential-model-for-discourse-parsing-on-multi-party-dialogues/:2:0","tags":["论文阅读","深度学习"],"title":"A Deep Sequential Model for Discourse Parsing on Multi-Party Dialogues","uri":"/a-deep-sequential-model-for-discourse-parsing-on-multi-party-dialogues/"},{"categories":["论文阅读"],"content":"2. Backgroud and Problems Background: In Natural Language Processing (NLP), discourse parsing is a crucial task. It helps in understanding the dependencies and structures within multi-party dialogues. These dependencies and structures aid various NLP tasks such as machine translation, question-answering systems, and so on. Problems: How to accurately parse dependencies and structures in multi-party dialogues? How to utilize both local information (current dialogue units) and global information (the overall dialogue structure) for prediction? How to improve the performance of dependency parsing in multi-party dialogues? ","date":"2023-11-08","objectID":"/a-deep-sequential-model-for-discourse-parsing-on-multi-party-dialogues/:3:0","tags":["论文阅读","深度学习"],"title":"A Deep Sequential Model for Discourse Parsing on Multi-Party Dialogues","uri":"/a-deep-sequential-model-for-discourse-parsing-on-multi-party-dialogues/"},{"categories":["论文阅读"],"content":"3. Method ","date":"2023-11-08","objectID":"/a-deep-sequential-model-for-discourse-parsing-on-multi-party-dialogues/:4:0","tags":["论文阅读","深度学习"],"title":"A Deep Sequential Model for Discourse Parsing on Multi-Party Dialogues","uri":"/a-deep-sequential-model-for-discourse-parsing-on-multi-party-dialogues/"},{"categories":["论文阅读"],"content":"3.1 Overview Model overview: 1）The model computes the non-structure representations of EDUs using hierarchical Gated Recurrent Unit(GRU) encoders. 2）Next, the model makes a sequential scan of the EDUs and do the following steps： 2.1）Link prediction：The model computes a score between the current EDU $u_i$ and each linking candidate $u_j$ (j \u003c i) using an MLP. These scores are the converted into probabilitis distributed over the previous EDUs using softmax. The EDU with the highest probability is selected as the linked EDU. 2.2）Relation classification：After identifying the link for current EDU $u_i$, the model performs relation classification to predict the relation type between $p_i$(the parents of $u_i$) and $u_i$ using a relation classifier. Similar to link predition, both non-sturcture and structured representations are used. 2.3）Structured representation encoding：After determining the link of current EDU $u_i$ between $u_j$ and the relation type of the link, the relation embedding $r_{ji}$, the non-structure representation of $u_i$, and the strtuctured representation of $p_i = u_j$ are fed into the encoder to derive the strcture representation of $u_i$. ","date":"2023-11-08","objectID":"/a-deep-sequential-model-for-discourse-parsing-on-multi-party-dialogues/:4:1","tags":["论文阅读","深度学习"],"title":"A Deep Sequential Model for Discourse Parsing on Multi-Party Dialogues","uri":"/a-deep-sequential-model-for-discourse-parsing-on-multi-party-dialogues/"},{"categories":["论文阅读"],"content":"3.2 Details 3.2.1 Local representations and non-structured global representations The first step involves the local representations and non-structure global representations. In the case of local representations, the paper employs a bidirectional GRU encoder to process the word sequence, ultimately yielding the local representation $u_i$, denoted as $h_i$. In the case of non-structure global representations, a GRU is applied to the local representations of the EDUs $h_0,h_1,…,h_n$, and the resulting hidden states serve as the non-structure global representations of the EDUs, denoted as $g^{NS}_0,g^{NS}_1,\\dots,g^{NS}_n$. 3.2.2 Structured global representation There are two key points to note: The derivation of the Structured Global Representation (SGR) for an EDU is carried out by a structure encoder along the development path of the predicted dependency tree for that EDU, for example, $u_0​→u_1​→u_2​→u_4​$. The encoder operates along this path, and the final hidden layer for $u_4$​ is considered its structured representation. In this paper, the authors introduce a mechanism called the Speaker Highlighting Mechanism (SHM) to optimize the generation of SR. This mechanism is similar to the attention mechanism but simpler. The idea behind this mechanism is to enhance the influence of a particular speaker on the current utterance by highlighting a previous utterance along the dependency tree’s generative path. This is akin to allocating more attention in the attention mechanism, thereby optimizing the model’s predictions.\" the function of structured representation as follows: $g^S_{0,a}$ is set to zero vector since the dummy root contains no real infomation. The paper places the steps for obtaining SGR (Structured Global Representation) before those for Link Prediction and Relation Classification. This is done to introduce the concept of SHM (Speaker Highlighting Mechanism). However, upon examining the formulas, it becomes evident that the acquisition of SGR requires information about the current EDU’s related relations. Therefore, in actual implementation, Link Prediction and Relation Classification precede the calculation of Structured Representation. Although the processing of links and relations requires structural information obtained from SHM, this information pertains to previous nodes, not the current node’s Structured Representation. The SGR for the root node is set as a zero vector, thus ensuring that the computational dependencies among various variables are satisfied ","date":"2023-11-08","objectID":"/a-deep-sequential-model-for-discourse-parsing-on-multi-party-dialogues/:4:2","tags":["论文阅读","深度学习"],"title":"A Deep Sequential Model for Discourse Parsing on Multi-Party Dialogues","uri":"/a-deep-sequential-model-for-discourse-parsing-on-multi-party-dialogues/"},{"categories":["论文阅读"],"content":"3.2.3 Link prediction and Relation Classification By integrating previous useful information, the authors obtain a new input vector that serves as the input for both the link predictor and the relation classifier. Taking $H_{i,\u003ci}(H_{i,\u003ci}=H_{i,0},\\dots,H_{i,i-1})$ as input, the link predictor estimates the probability thar each $u_j(j\u003ci)$ is the parent of $u_i$ on the dependency tree. The relation classifier the predicts the relation type between $u_j$ and $u_i$, if $u_j$ is the predicted parent of $u_i$. The processes of link prediction and relation classification are quite similar. Both involve a single hidden layer followed by a softmax operation, with the outcome having the highest probability being selected as the result. For detailed formulas pertaining to these processes, please refer to the paper. ","date":"2023-11-08","objectID":"/a-deep-sequential-model-for-discourse-parsing-on-multi-party-dialogues/:4:3","tags":["论文阅读","深度学习"],"title":"A Deep Sequential Model for Discourse Parsing on Multi-Party Dialogues","uri":"/a-deep-sequential-model-for-discourse-parsing-on-multi-party-dialogues/"},{"categories":["论文阅读"],"content":"Notes What I gained from this paper is the exposure to a potential neural network architecture for the task of multi-party dialogue parsing. Additionally, the similarities between the SHM (Speaker Highlighting Mechanism) and the Attention mechanism in Transformers have deepened my understanding of the steps involved in neural network-based task processing. ","date":"2023-11-08","objectID":"/a-deep-sequential-model-for-discourse-parsing-on-multi-party-dialogues/:5:0","tags":["论文阅读","深度学习"],"title":"A Deep Sequential Model for Discourse Parsing on Multi-Party Dialogues","uri":"/a-deep-sequential-model-for-discourse-parsing-on-multi-party-dialogues/"},{"categories":["Markdown"],"content":"Hugo 和 LoveIt 中的 Emoji 的用法指南.","date":"2019-10-01","objectID":"/emoji-support/","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Emoji 可以通过多种方式在 Hugo 项目中启用. emojify 方法可以直接在模板中调用, 或者使用行内 Shortcodes. 要全局使用 emoji, 需要在你的网站配置中设置 enableEmoji 为 true, 然后你就可以直接在文章中输入 emoji 的代码. 它们以冒号开头和结尾，并且包含 emoji 的 代码: 去露营啦! :tent: 很快就回来. 真开心! :joy: 呈现的输出效果如下: 去露营啦! ⛺ 很快就回来. 真开心! 😂 以下符号清单是 emoji 代码的非常有用的参考. ","date":"2019-10-01","objectID":"/emoji-support/:0:0","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"表情与情感 ","date":"2019-10-01","objectID":"/emoji-support/:1:0","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"笑脸表情 图标 代码 图标 代码 😀 grinning 😃 smiley 😄 smile 😁 grin 😆 laughing satisfied 😅 sweat_smile 🤣 rofl 😂 joy 🙂 slightly_smiling_face 🙃 upside_down_face 😉 wink 😊 blush 😇 innocent ","date":"2019-10-01","objectID":"/emoji-support/:1:1","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"爱意表情 图标 代码 图标 代码 😍 heart_eyes 😘 kissing_heart 😗 kissing ☺️ relaxed 😚 kissing_closed_eyes 😙 kissing_smiling_eyes ","date":"2019-10-01","objectID":"/emoji-support/:1:2","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"吐舌头表情 图标 代码 图标 代码 😋 yum 😛 stuck_out_tongue 😜 stuck_out_tongue_winking_eye 😝 stuck_out_tongue_closed_eyes 🤑 money_mouth_face ","date":"2019-10-01","objectID":"/emoji-support/:1:3","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"带手的表情 图标 代码 图标 代码 🤗 hugs 🤔 thinking ","date":"2019-10-01","objectID":"/emoji-support/:1:4","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"中性表情 图标 代码 图标 代码 🤐 zipper_mouth_face 😐 neutral_face 😑 expressionless 😶 no_mouth 😏 smirk 😒 unamused 🙄 roll_eyes 😬 grimacing 🤥 lying_face ","date":"2019-10-01","objectID":"/emoji-support/:1:5","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"困倦的表情 图标 代码 图标 代码 😌 relieved 😔 pensive 😪 sleepy 🤤 drooling_face 😴 sleeping ","date":"2019-10-01","objectID":"/emoji-support/:1:6","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"不适的表情 图标 代码 图标 代码 😷 mask 🤒 face_with_thermometer 🤕 face_with_head_bandage 🤢 nauseated_face 🤧 sneezing_face 😵 dizzy_face ","date":"2019-10-01","objectID":"/emoji-support/:1:7","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"戴帽子的表情 图标 代码 图标 代码 🤠 cowboy_hat_face ","date":"2019-10-01","objectID":"/emoji-support/:1:8","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"戴眼镜的表情 图标 代码 图标 代码 😎 sunglasses 🤓 nerd_face ","date":"2019-10-01","objectID":"/emoji-support/:1:9","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"担心的表情 图标 代码 图标 代码 😕 confused 😟 worried 🙁 slightly_frowning_face ☹ frowning_face 😮 open_mouth 😯 hushed 😲 astonished 😳 flushed 😦 frowning 😧 anguished 😨 fearful 😰 cold_sweat 😥 disappointed_relieved 😢 cry 😭 sob 😱 scream 😖 confounded 😣 persevere 😞 disappointed 😓 sweat 😩 weary 😫 tired_face ","date":"2019-10-01","objectID":"/emoji-support/:1:10","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"否定的表情 图标 代码 图标 代码 😤 triumph 😡 pout rage 😠 angry 😈 smiling_imp 👿 imp 💀 skull ☠️ skull_and_crossbones ","date":"2019-10-01","objectID":"/emoji-support/:1:11","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"特殊打扮的表情 图标 代码 图标 代码 💩 hankey poop shit 🤡 clown_face 👹 japanese_ogre 👺 japanese_goblin 👻 ghost 👽 alien 👾 space_invader 🤖 robot ","date":"2019-10-01","objectID":"/emoji-support/:1:12","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"猫脸表情 图标 代码 图标 代码 😺 smiley_cat 😸 smile_cat 😹 joy_cat 😻 heart_eyes_cat 😼 smirk_cat 😽 kissing_cat 🙀 scream_cat 😿 crying_cat_face 😾 pouting_cat ","date":"2019-10-01","objectID":"/emoji-support/:1:13","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"猴脸表情 图标 代码 图标 代码 🙈 see_no_evil 🙉 hear_no_evil 🙊 speak_no_evil ","date":"2019-10-01","objectID":"/emoji-support/:1:14","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"情感 图标 代码 图标 代码 💋 kiss 💌 love_letter 💘 cupid 💝 gift_heart 💖 sparkling_heart 💗 heartpulse 💓 heartbeat 💞 revolving_hearts 💕 two_hearts 💟 heart_decoration ❣️ heavy_heart_exclamation 💔 broken_heart ❤️ heart 💛 yellow_heart 💚 green_heart 💙 blue_heart 💜 purple_heart 🖤 black_heart 💯 100 💢 anger 💥 boom collision 💫 dizzy 💦 sweat_drops 💨 dash 🕳️ hole 💣 bomb 💬 speech_balloon 👁️‍🗨️ eye_speech_bubble 🗯️ right_anger_bubble 💭 thought_balloon 💤 zzz ","date":"2019-10-01","objectID":"/emoji-support/:1:15","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"人与身体 ","date":"2019-10-01","objectID":"/emoji-support/:2:0","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"张开手掌的手势 图标 代码 图标 代码 👋 wave 🤚 raised_back_of_hand 🖐️ raised_hand_with_fingers_splayed ✋ hand raised_hand 🖖 vulcan_salute ","date":"2019-10-01","objectID":"/emoji-support/:2:1","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"部分手指的手势 图标 代码 图标 代码 👌 ok_hand ✌️ v 🤞 crossed_fingers 🤘 metal 🤙 call_me_hand ","date":"2019-10-01","objectID":"/emoji-support/:2:2","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"一根手指的手势 图标 代码 图标 代码 👈 point_left 👉 point_right 👆 point_up_2 🖕 fu middle_finger 👇 point_down ☝️ point_up ","date":"2019-10-01","objectID":"/emoji-support/:2:3","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"握紧的手势 图标 代码 图标 代码 👍 +1 thumbsup 👎 -1 thumbsdown ✊ fist fist_raised 👊 facepunch fist_oncoming punch 🤛 fist_left 🤜 fist_right ","date":"2019-10-01","objectID":"/emoji-support/:2:4","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"两只手 图标 代码 图标 代码 👏 clap 🙌 raised_hands 👐 open_hands 🤝 handshake 🙏 pray ","date":"2019-10-01","objectID":"/emoji-support/:2:5","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"握住东西的手势 图标 代码 图标 代码 ✍️ writing_hand 💅 nail_care 🤳 selfie ","date":"2019-10-01","objectID":"/emoji-support/:2:6","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"身体部位 图标 代码 图标 代码 💪 muscle 👂 ear 👃 nose 👀 eyes 👁️ eye 👅 tongue 👄 lips ","date":"2019-10-01","objectID":"/emoji-support/:2:7","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"人 图标 代码 图标 代码 👶 baby 👦 boy 👧 girl :blonde_man: blonde_man person_with_blond_hair 👨 man 👩 woman 👱‍♀️ blonde_woman 👴 older_man 👵 older_woman ","date":"2019-10-01","objectID":"/emoji-support/:2:8","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"身体动作 图标 代码 图标 代码 🙍‍♀️ frowning_woman person_frowning 🙍‍♂️ frowning_man 🙎‍♀️ person_with_pouting_face pouting_woman 🙎‍♂️ pouting_man 🙅‍♀️ ng_woman no_good no_good_woman 🙅‍♂️ ng_man no_good_man 🙆‍♀️ ok_woman 🙆‍♂️ ok_man 💁‍♀️ information_desk_person sassy_woman tipping_hand_woman 💁‍♂️ sassy_man tipping_hand_man 🙋‍♀️ raising_hand raising_hand_woman 🙋‍♂️ raising_hand_man 🙇‍♂️ bow bowing_man 🙇‍♀️ bowing_woman 🤦‍♂️ man_facepalming 🤦‍♀️ woman_facepalming 🤷‍♂️ man_shrugging 🤷‍♀️ woman_shrugging ","date":"2019-10-01","objectID":"/emoji-support/:2:9","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"人物角色 图标 代码 图标 代码 👨‍⚕️ man_health_worker 👩‍⚕️ woman_health_worker 👨‍🎓 man_student 👩‍🎓 woman_student 👨‍🏫 man_teacher 👩‍🏫 woman_teacher 👨‍⚖️ man_judge 👩‍⚖️ woman_judge 👨‍🌾 man_farmer 👩‍🌾 woman_farmer 👨‍🍳 man_cook 👩‍🍳 woman_cook 👨‍🔧 man_mechanic 👩‍🔧 woman_mechanic 👨‍🏭 man_factory_worker 👩‍🏭 woman_factory_worker 👨‍💼 man_office_worker 👩‍💼 woman_office_worker 👨‍🔬 man_scientist 👩‍🔬 woman_scientist 👨‍💻 man_technologist 👩‍💻 woman_technologist 👨‍🎤 man_singer 👩‍🎤 woman_singer 👨‍🎨 man_artist 👩‍🎨 woman_artist 👨‍✈️ man_pilot 👩‍✈️ woman_pilot 👨‍🚀 man_astronaut 👩‍🚀 woman_astronaut 👨‍🚒 man_firefighter 👩‍🚒 woman_firefighter 👮‍♂️ cop policeman 👮‍♀️ policewoman 🕵 detective male_detective 🕵️‍♀️ female_detective 💂‍♂️ guardsman 💂‍♀️ guardswoman 👷‍♂️ construction_worker construction_worker_man 👷‍♀️ construction_worker_woman 🤴 prince 👸 princess 👳‍♂️ man_with_turban 👳‍♀️ woman_with_turban 👲 man_with_gua_pi_mao 🤵‍♂️ man_in_tuxedo 👰 bride_with_veil 🤰 pregnant_woman ","date":"2019-10-01","objectID":"/emoji-support/:2:10","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"幻想的人物 图标 代码 图标 代码 👼 angel 🎅 santa 🤶 mrs_claus ","date":"2019-10-01","objectID":"/emoji-support/:2:11","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"人物活动 图标 代码 图标 代码 💆‍♀️ massage massage_woman 💆‍♂️ massage_man 💇‍♀️ haircut haircut_woman 💇‍♂️ haircut_man 🚶‍♂️ walking walking_man 🚶‍♀️ walking_woman 🏃‍♂️ runner running running_man 🏃‍♀️ running_woman 💃 dancer 🕺 man_dancing 🕴️ business_suit_levitating 👯‍♀️ dancers dancing_women 👯‍♂️ dancing_men ","date":"2019-10-01","objectID":"/emoji-support/:2:12","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"体育 图标 代码 图标 代码 🤺 person_fencing 🏇 horse_racing ⛷️ skier 🏂 snowboarder 🏌️‍♂️ golfing_man 🏌️‍♀️ golfing_woman 🏄‍♂️ surfer surfing_man 🏄‍♀️ surfing_woman 🚣‍♂️ rowboat rowing_man 🚣‍♀️ rowing_woman 🏊‍♂️ swimmer swimming_man 🏊‍♀️ swimming_woman ⛹️‍♂️ basketball_man ⛹️‍♀️ basketball_woman 🏋️‍♂️ weight_lifting_man 🏋️‍♀️ weight_lifting_woman 🚴‍♂️ bicyclist biking_man 🚴‍♀️ biking_woman 🚵‍♂️ mountain_bicyclist mountain_biking_man 🚵‍♀️ mountain_biking_woman 🤸‍♂️ man_cartwheeling 🤸‍♀️ woman_cartwheeling 🤼‍♂️ men_wrestling 🤼‍♀️ women_wrestling 🤽‍♂️ man_playing_water_polo 🤽‍♀️ woman_playing_water_polo 🤾‍♂️ man_playing_handball 🤾‍♀️ woman_playing_handball 🤹‍♂️ man_juggling 🤹‍♀️ woman_juggling ","date":"2019-10-01","objectID":"/emoji-support/:2:13","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"休息 图标 代码 图标 代码 🛀 bath 🛌 sleeping_bed ","date":"2019-10-01","objectID":"/emoji-support/:2:14","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"家庭 图标 代码 图标 代码 👭 two_women_holding_hands 👫 couple 👬 two_men_holding_hands 👩‍❤️‍💋‍👨 couplekiss_man_woman 👨‍❤️‍💋‍👨 couplekiss_man_man 👩‍❤️‍💋‍👩 couplekiss_woman_woman 👩‍❤️‍👨 couple_with_heart couple_with_heart_woman_man 👨‍❤️‍👨 couple_with_heart_man_man 👩‍❤️‍👩 couple_with_heart_woman_woman 👨‍👩‍👦 family family_man_woman_boy 👨‍👩‍👧 family_man_woman_girl 👨‍👩‍👧‍👦 family_man_woman_girl_boy 👨‍👩‍👦‍👦 family_man_woman_boy_boy 👨‍👩‍👧‍👧 family_man_woman_girl_girl 👨‍👨‍👦 family_man_man_boy 👨‍👨‍👧 family_man_man_girl 👨‍👨‍👧‍👦 family_man_man_girl_boy 👨‍👨‍👦‍👦 family_man_man_boy_boy 👨‍👨‍👧‍👧 family_man_man_girl_girl 👩‍👩‍👦 family_woman_woman_boy 👩‍👩‍👧 family_woman_woman_girl 👩‍👩‍👧‍👦 family_woman_woman_girl_boy 👩‍👩‍👦‍👦 family_woman_woman_boy_boy 👩‍👩‍👧‍👧 family_woman_woman_girl_girl 👨‍👦 family_man_boy 👨‍👦‍👦 family_man_boy_boy 👨‍👧 family_man_girl 👨‍👧‍👦 family_man_girl_boy 👨‍👧‍👧 family_man_girl_girl 👩‍👦 family_woman_boy 👩‍👦‍👦 family_woman_boy_boy 👩‍👧 family_woman_girl 👩‍👧‍👦 family_woman_girl_boy 👩‍👧‍👧 family_woman_girl_girl ","date":"2019-10-01","objectID":"/emoji-support/:2:15","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"人物符号 图标 代码 图标 代码 🗣 speaking_head 👤 bust_in_silhouette 👥 busts_in_silhouette 👣 footprints ","date":"2019-10-01","objectID":"/emoji-support/:2:16","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"动物与自然 ","date":"2019-10-01","objectID":"/emoji-support/:3:0","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"哺乳动物 图标 代码 图标 代码 🐵 monkey_face 🐒 monkey 🦍 gorilla 🐶 dog 🐕 dog2 🐩 poodle 🐺 wolf 🦊 fox_face 🐱 cat 🐈 cat2 🦁 lion 🐯 tiger 🐅 tiger2 🐆 leopard 🐴 horse 🐎 racehorse 🦄 unicorn 🦌 deer 🐮 cow 🐂 ox 🐃 water_buffalo 🐄 cow2 🐷 pig 🐖 pig2 🐗 boar 🐽 pig_nose 🐏 ram 🐑 sheep 🐐 goat 🐪 dromedary_camel 🐫 camel 🐘 elephant 🦏 rhinoceros 🐭 mouse 🐁 mouse2 🐀 rat 🐹 hamster 🐰 rabbit 🐇 rabbit2 🐿️ chipmunk 🦇 bat 🐻 bear 🐨 koala 🐼 panda_face 🐾 feet paw_prints ","date":"2019-10-01","objectID":"/emoji-support/:3:1","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"鸟类 图标 代码 图标 代码 🦃 turkey 🐔 chicken 🐓 rooster 🐣 hatching_chick 🐤 baby_chick 🐥 hatched_chick 🐦 bird 🐧 penguin 🕊 dove 🦅 eagle 🦆 duck 🦉 owl ","date":"2019-10-01","objectID":"/emoji-support/:3:2","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"两栖动物 icon code icon code 🐸 frog ","date":"2019-10-01","objectID":"/emoji-support/:3:3","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"爬虫类 图标 代码 图标 代码 🐊 crocodile 🐢 turtle 🦎 lizard 🐍 snake 🐲 dragon_face 🐉 dragon ","date":"2019-10-01","objectID":"/emoji-support/:3:4","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"海洋动物 图标 代码 图标 代码 🐳 whale 🐋 whale2 🐬 dolphin flipper 🐟 fish 🐠 tropical_fish 🐡 blowfish 🦈 shark 🐙 octopus 🐚 shell ","date":"2019-10-01","objectID":"/emoji-support/:3:5","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"虫类 图标 代码 图标 代码 🐌 snail 🦋 butterfly 🐛 bug 🐜 ant 🐝 bee honeybee 🪲 beetle 🕷️ spider 🕸️ spider_web 🦂 scorpion ","date":"2019-10-01","objectID":"/emoji-support/:3:6","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"花类植物 图标 代码 图标 代码 💐 bouquet 🌸 cherry_blossom 💮 white_flower 🏵️ rosette 🌹 rose 🥀 wilted_flower 🌺 hibiscus 🌻 sunflower 🌼 blossom 🌷 tulip ","date":"2019-10-01","objectID":"/emoji-support/:3:7","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"其它植物 图标 代码 图标 代码 🌱 seedling 🌲 evergreen_tree 🌳 deciduous_tree 🌴 palm_tree 🌵 cactus 🌾 ear_of_rice 🌿 herb ☘️ shamrock 🍀 four_leaf_clover 🍁 maple_leaf 🍂 fallen_leaf 🍃 leaves ","date":"2019-10-01","objectID":"/emoji-support/:3:8","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"食物与饮料 ","date":"2019-10-01","objectID":"/emoji-support/:4:0","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"水果 图标 代码 图标 代码 🍇 grapes 🍈 melon 🍉 watermelon 🍊 mandarin orange tangerine 🍋 lemon 🍌 banana 🍍 pineapple 🍎 apple 🍏 green_apple 🍐 pear 🍑 peach 🍒 cherries 🍓 strawberry 🥝 kiwi_fruit 🍅 tomato ","date":"2019-10-01","objectID":"/emoji-support/:4:1","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"蔬菜 图标 代码 图标 代码 🥑 avocado 🍆 eggplant 🥔 potato 🥕 carrot 🌽 corn 🌶️ hot_pepper 🥒 cucumber 🍄 mushroom 🥜 peanuts 🌰 chestnut ","date":"2019-10-01","objectID":"/emoji-support/:4:2","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"快餐 图标 代码 图标 代码 🍞 bread 🥐 croissant 🥖 baguette_bread 🥞 pancakes 🧀 cheese 🍖 meat_on_bone 🍗 poultry_leg 🥓 bacon 🍔 hamburger 🍟 fries 🍕 pizza 🌭 hotdog 🌮 taco 🌯 burrito 🥙 stuffed_flatbread 🥚 egg 🍳 fried_egg 🥘 shallow_pan_of_food 🍲 stew 🥗 green_salad 🍿 popcorn ","date":"2019-10-01","objectID":"/emoji-support/:4:3","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"亚洲食物 图标 代码 图标 代码 🍱 bento 🍘 rice_cracker 🍙 rice_ball 🍚 rice 🍛 curry 🍜 ramen 🍝 spaghetti 🍠 sweet_potato 🍢 oden 🍣 sushi 🍤 fried_shrimp 🍥 fish_cake 🍡 dango ","date":"2019-10-01","objectID":"/emoji-support/:4:4","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"海鲜 图标 代码 图标 代码 🦀 crab 🦐 shrimp 🦑 squid ","date":"2019-10-01","objectID":"/emoji-support/:4:5","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"甜点 图标 代码 图标 代码 🍦 icecream 🍧 shaved_ice 🍨 ice_cream 🍩 doughnut 🍪 cookie 🎂 birthday 🍰 cake 🍫 chocolate_bar 🍬 candy 🍭 lollipop 🍮 custard 🍯 honey_pot ","date":"2019-10-01","objectID":"/emoji-support/:4:6","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"饮料 图标 代码 图标 代码 🍼 baby_bottle 🥛 milk_glass ☕ coffee 🍵 tea 🍶 sake 🍾 champagne 🍷 wine_glass 🍸 cocktail 🍹 tropical_drink 🍺 beer 🍻 beers 🥂 clinking_glasses 🥃 tumbler_glass ","date":"2019-10-01","objectID":"/emoji-support/:4:7","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"餐具 图标 代码 图标 代码 🍽️ plate_with_cutlery 🍴 fork_and_knife 🥄 spoon 🔪 hocho knife 🏺 amphora ","date":"2019-10-01","objectID":"/emoji-support/:4:8","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"旅游与地理 ","date":"2019-10-01","objectID":"/emoji-support/:5:0","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"地图 图标 代码 图标 代码 🌍 earth_africa 🌎 earth_americas 🌏 earth_asia 🌐 globe_with_meridians 🗺️ world_map 🗾 japan ","date":"2019-10-01","objectID":"/emoji-support/:5:1","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"地理现象 图标 代码 图标 代码 🏔 mountain_snow ⛰️ mountain 🌋 volcano 🗻 mount_fuji 🏕️ camping ⛱ beach_umbrella 🏜️ desert 🏝️ desert_island 🏞️ national_park ","date":"2019-10-01","objectID":"/emoji-support/:5:2","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"建筑物 图标 代码 图标 代码 🏟️ stadium 🏛️ classical_building 🏗️ building_construction 🏘 houses 🏚 derelict_house 🏠 house 🏡 house_with_garden 🏢 office 🏣 post_office 🏤 european_post_office 🏥 hospital 🏦 bank 🏨 hotel 🏩 love_hotel 🏪 convenience_store 🏫 school 🏬 department_store 🏭 factory 🏯 japanese_castle 🏰 european_castle 💒 wedding 🗼 tokyo_tower 🗽 statue_of_liberty ","date":"2019-10-01","objectID":"/emoji-support/:5:3","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"宗教建筑 图标 代码 图标 代码 ⛪ church 🕌 mosque 🕍 synagogue ⛩️ shinto_shrine 🕋 kaaba ","date":"2019-10-01","objectID":"/emoji-support/:5:4","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"其它地点 图标 代码 图标 代码 ⛲ fountain ⛺ tent 🌁 foggy 🌃 night_with_stars 🏙️ cityscape 🌄 sunrise_over_mountains 🌅 sunrise 🌆 city_sunset 🌇 city_sunrise 🌉 bridge_at_night ♨️ hotsprings 🎠 carousel_horse 🎡 ferris_wheel 🎢 roller_coaster 💈 barber 🎪 circus_tent ","date":"2019-10-01","objectID":"/emoji-support/:5:5","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"陆路运输 图标 代码 图标 代码 🚂 steam_locomotive 🚃 railway_car 🚄 bullettrain_side 🚅 bullettrain_front 🚆 train2 🚇 metro 🚈 light_rail 🚉 station 🚊 tram 🚝 monorail 🚞 mountain_railway 🚋 train 🚌 bus 🚍 oncoming_bus 🚎 trolleybus 🚐 minibus 🚑 ambulance 🚒 fire_engine 🚓 police_car 🚔 oncoming_police_car 🚕 taxi 🚖 oncoming_taxi 🚗 car red_car 🚘 oncoming_automobile 🚙 blue_car 🚚 truck 🚛 articulated_lorry 🚜 tractor 🏎️ racing_car 🏍 motorcycle 🛵 motor_scooter 🚲 bike 🛴 kick_scooter 🚏 busstop 🛣️ motorway 🛤️ railway_track 🛢️ oil_drum ⛽ fuelpump 🚨 rotating_light 🚥 traffic_light 🚦 vertical_traffic_light 🛑 stop_sign 🚧 construction ","date":"2019-10-01","objectID":"/emoji-support/:5:6","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"水路运输 图标 代码 图标 代码 ⚓ anchor ⛵ boat sailboat 🛶 canoe 🚤 speedboat 🛳️ passenger_ship ⛴️ ferry 🛥️ motor_boat 🚢 ship ","date":"2019-10-01","objectID":"/emoji-support/:5:7","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"空中运输 图标 代码 图标 代码 ✈️ airplane 🛩️ small_airplane 🛫 flight_departure 🛬 flight_arrival 💺 seat 🚁 helicopter 🚟 suspension_railway 🚠 mountain_cableway 🚡 aerial_tramway 🛰️ artificial_satellite 🚀 rocket ","date":"2019-10-01","objectID":"/emoji-support/:5:8","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"旅馆 icon code icon code 🛎️ bellhop_bell ","date":"2019-10-01","objectID":"/emoji-support/:5:9","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"时间 图标 代码 图标 代码 ⌛ hourglass ⏳ hourglass_flowing_sand ⌚ watch ⏰ alarm_clock ⏱️ stopwatch ⏲️ timer_clock 🕰️ mantelpiece_clock 🕛 clock12 🕧 clock1230 🕐 clock1 🕜 clock130 🕑 clock2 🕝 clock230 🕒 clock3 🕞 clock330 🕓 clock4 🕟 clock430 🕔 clock5 🕠 clock530 🕕 clock6 🕡 clock630 🕖 clock7 🕢 clock730 🕗 clock8 🕣 clock830 🕘 clock9 🕤 clock930 🕙 clock10 🕥 clock1030 🕚 clock11 🕦 clock1130 ","date":"2019-10-01","objectID":"/emoji-support/:5:10","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"天空与天气 图标 代码 图标 代码 🌑 new_moon 🌒 waxing_crescent_moon 🌓 first_quarter_moon 🌔 moon waxing_gibbous_moon 🌕 full_moon 🌖 waning_gibbous_moon 🌗 last_quarter_moon 🌘 waning_crescent_moon 🌙 crescent_moon 🌚 new_moon_with_face 🌛 first_quarter_moon_with_face 🌜 last_quarter_moon_with_face 🌡️ thermometer ☀️ sunny 🌝 full_moon_with_face 🌞 sun_with_face ⭐ star 🌟 star2 🌠 stars 🌌 milky_way ☁️ cloud ⛅ partly_sunny ⛈ cloud_with_lightning_and_rain 🌤 sun_behind_small_cloud 🌥 sun_behind_large_cloud 🌦 sun_behind_rain_cloud 🌧 cloud_with_rain 🌨 cloud_with_snow 🌩 cloud_with_lightning 🌪️ tornado 🌫️ fog 🌬 wind_face 🌀 cyclone 🌈 rainbow 🌂 closed_umbrella ☂️ open_umbrella ☂️ umbrella ⛱️ parasol_on_ground ⚡ zap ❄️ snowflake ☃️ snowman_with_snow ☃️ snowman ☄️ comet 🔥 fire 💧 droplet 🌊 ocean ","date":"2019-10-01","objectID":"/emoji-support/:5:11","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"活动 ","date":"2019-10-01","objectID":"/emoji-support/:6:0","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"事件 图标 代码 图标 代码 🎃 jack_o_lantern 🎄 christmas_tree 🎆 fireworks 🎇 sparkler ✨ sparkles 🎈 balloon 🎉 tada 🎊 confetti_ball 🎋 tanabata_tree 🎍 bamboo 🎎 dolls 🎏 flags 🎐 wind_chime 🎑 rice_scene 🎀 ribbon 🎁 gift 🎗️ reminder_ribbon 🎟 tickets 🎫 ticket ","date":"2019-10-01","objectID":"/emoji-support/:6:1","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"奖杯与奖牌 图标 代码 图标 代码 🎖️ medal_military 🏆 trophy 🏅 medal_sports 🥇 1st_place_medal 🥈 2nd_place_medal 🥉 3rd_place_medal ","date":"2019-10-01","objectID":"/emoji-support/:6:2","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"体育运动 图标 代码 图标 代码 ⚽ soccer ⚾ baseball 🏀 basketball 🏐 volleyball 🏈 football 🏉 rugby_football 🎾 tennis 🎳 bowling 🦗 cricket 🏑 field_hockey 🏒 ice_hockey 🏓 ping_pong 🏸 badminton 🥊 boxing_glove 🥋 martial_arts_uniform 🥅 goal_net ⛳ golf ⛸️ ice_skate 🎣 fishing_pole_and_fish 🎽 running_shirt_with_sash 🎿 ski ","date":"2019-10-01","objectID":"/emoji-support/:6:3","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"游戏 图标 代码 图标 代码 🎯 dart 🎱 8ball 🔮 crystal_ball 🎮 video_game 🕹️ joystick 🎰 slot_machine 🎲 game_die ♠️ spades ♥️ hearts ♦️ diamonds ♣️ clubs 🃏 black_joker 🀄 mahjong 🎴 flower_playing_cards ","date":"2019-10-01","objectID":"/emoji-support/:6:4","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"艺术与工艺 图标 代码 图标 代码 🎭 performing_arts 🖼 framed_picture 🎨 art ","date":"2019-10-01","objectID":"/emoji-support/:6:5","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"物品 ","date":"2019-10-01","objectID":"/emoji-support/:7:0","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"服装 图标 代码 图标 代码 👓 eyeglasses 🕶️ dark_sunglasses 👔 necktie 👕 shirt tshirt 👖 jeans 👗 dress 👘 kimono 👙 bikini 👚 womans_clothes 👛 purse 👜 handbag 👝 pouch 🛍️ shopping 🎒 school_satchel 👞 mans_shoe shoe 👟 athletic_shoe 👠 high_heel 👡 sandal 👢 boot 👑 crown 👒 womans_hat 🎩 tophat 🎓 mortar_board ⛑️ rescue_worker_helmet 📿 prayer_beads 💄 lipstick 💍 ring 💎 gem ","date":"2019-10-01","objectID":"/emoji-support/:7:1","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"声音 图标 代码 图标 代码 🔇 mute 🔈 speaker 🔉 sound 🔊 loud_sound 📢 loudspeaker 📣 mega 📯 postal_horn 🔔 bell 🔕 no_bell ","date":"2019-10-01","objectID":"/emoji-support/:7:2","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"音乐 图标 代码 图标 代码 🎼 musical_score 🎵 musical_note 🎶 notes 🎙️ studio_microphone 🎚️ level_slider 🎛️ control_knobs 🎤 microphone 🎧 headphones 📻 radio ","date":"2019-10-01","objectID":"/emoji-support/:7:3","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"乐器 图标 代码 图标 代码 🎷 saxophone 🎸 guitar 🎹 musical_keyboard 🎺 trumpet 🎻 violin 🥁 drum ","date":"2019-10-01","objectID":"/emoji-support/:7:4","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"电话 图标 代码 图标 代码 📱 iphone 📲 calling ☎️ phone telephone 📞 telephone_receiver 📟 pager 📠 fax ","date":"2019-10-01","objectID":"/emoji-support/:7:5","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"电脑 图标 代码 图标 代码 🔋 battery 🔌 electric_plug 💻 computer 🖥️ desktop_computer 🖨️ printer ⌨️ keyboard 🖱 computer_mouse 🖲️ trackball 💽 minidisc 💾 floppy_disk 💿 cd 📀 dvd ","date":"2019-10-01","objectID":"/emoji-support/:7:6","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"灯光与影像 图标 代码 图标 代码 🎥 movie_camera 🎞️ film_strip 📽️ film_projector 🎬 clapper 📺 tv 📷 camera 📸 camera_flash 📹 video_camera 📼 vhs 🔍 mag 🔎 mag_right 🕯️ candle 💡 bulb 🔦 flashlight 🏮 izakaya_lantern lantern ","date":"2019-10-01","objectID":"/emoji-support/:7:7","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"书与纸张 图标 代码 图标 代码 📔 notebook_with_decorative_cover 📕 closed_book 📖 book open_book 📗 green_book 📘 blue_book 📙 orange_book 📚 books 📓 notebook 📒 ledger 📃 page_with_curl 📜 scroll 📄 page_facing_up 📰 newspaper 🗞️ newspaper_roll 📑 bookmark_tabs 🔖 bookmark 🏷️ label ","date":"2019-10-01","objectID":"/emoji-support/:7:8","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"钱 图标 代码 图标 代码 💰 moneybag 💴 yen 💵 dollar 💶 euro 💷 pound 💸 money_with_wings 💳 credit_card 💹 chart ","date":"2019-10-01","objectID":"/emoji-support/:7:9","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"邮件 图标 代码 图标 代码 ✉️ email envelope 📧 📧 📨 incoming_envelope 📩 envelope_with_arrow 📤 outbox_tray 📥 inbox_tray 📦 package 📫 mailbox 📪 mailbox_closed 📬 mailbox_with_mail 📭 mailbox_with_no_mail 📮 postbox 🗳 ballot_box ","date":"2019-10-01","objectID":"/emoji-support/:7:10","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"书写 图标 代码 图标 代码 ✏️ pencil2 ✒️ black_nib 🖋 fountain_pen 🖊 pen 🖌 paintbrush 🖍 crayon 📝 memo pencil ","date":"2019-10-01","objectID":"/emoji-support/:7:11","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"办公 图标 代码 图标 代码 💼 briefcase 📁 file_folder 📂 open_file_folder 🗂️ card_index_dividers 📅 date 📆 calendar 🗒 spiral_notepad 🗓 spiral_calendar 📇 card_index 📈 chart_with_upwards_trend 📉 chart_with_downwards_trend 📊 bar_chart 📋 clipboard 📌 pushpin 📍 round_pushpin 📎 paperclip 🖇 paperclips 📏 straight_ruler 📐 triangular_ruler ✂️ scissors 🗃️ card_file_box 🗄️ file_cabinet 🗑️ wastebasket ","date":"2019-10-01","objectID":"/emoji-support/:7:12","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"锁 图标 代码 图标 代码 🔒 lock 🔓 unlock 🔏 lock_with_ink_pen 🔐 closed_lock_with_key 🔑 key 🗝️ old_key ","date":"2019-10-01","objectID":"/emoji-support/:7:13","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"工具 图标 代码 图标 代码 🔨 hammer ⛏️ pick ⚒️ hammer_and_pick 🛠️ hammer_and_wrench 🗡 dagger ⚔️ crossed_swords 🔫 gun 🏹 bow_and_arrow 🛡️ shield 🔧 wrench 🔩 nut_and_bolt ⚙️ gear 🗜 clamp ⚖ balance_scale 🔗 link ⛓️ chains ","date":"2019-10-01","objectID":"/emoji-support/:7:14","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"科学 图标 代码 图标 代码 ⚗️ alembic 🔬 microscope 🔭 telescope 🛰️ satellite ","date":"2019-10-01","objectID":"/emoji-support/:7:15","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"医疗 图标 代码 图标 代码 💉 syringe 💊 pill ","date":"2019-10-01","objectID":"/emoji-support/:7:16","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"生活用品 图标 代码 图标 代码 🚪 door 🛏️ bed 🛋️ couch_and_lamp 🚽 toilet 🚿 shower 🛁 bathtub 🛒 shopping_cart ","date":"2019-10-01","objectID":"/emoji-support/:7:17","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"其它物品 图标 代码 图标 代码 🚬 smoking ⚰️ coffin ⚱️ funeral_urn 🗿 moyai ","date":"2019-10-01","objectID":"/emoji-support/:7:18","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"符号 ","date":"2019-10-01","objectID":"/emoji-support/:8:0","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"交通标识 图标 代码 图标 代码 🏧 atm 🚮 put_litter_in_its_place 🚰 potable_water ♿ wheelchair 🚹 mens 🚺 womens 🚻 restroom 🚼 baby_symbol 🚾 wc 🛂 passport_control 🛃 customs 🛄 baggage_claim 🛅 left_luggage ","date":"2019-10-01","objectID":"/emoji-support/:8:1","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"警告 图标 代码 图标 代码 ⚠️ warning 🚸 children_crossing ⛔ no_entry 🚫 no_entry_sign 🚳 no_bicycles 🚭 no_smoking 🚯 do_not_litter 🚱 🚱 🚷 no_pedestrians 📵 no_mobile_phones 🔞 underage ☢ radioactive ☣ biohazard ","date":"2019-10-01","objectID":"/emoji-support/:8:2","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"箭头 图标 代码 图标 代码 ⬆️ arrow_up ↗️ arrow_upper_right ➡️ arrow_right ↘️ arrow_lower_right ⬇️ arrow_down ↙️ arrow_lower_left ⬅️ arrow_left ↖️ arrow_upper_left ↕️ arrow_up_down ↔️ left_right_arrow ↩️ leftwards_arrow_with_hook ↪️ arrow_right_hook ⤴️ arrow_heading_up ⤵️ arrow_heading_down 🔃 arrows_clockwise 🔄 arrows_counterclockwise 🔙 back 🔚 end 🔛 on 🔜 soon 🔝 top ","date":"2019-10-01","objectID":"/emoji-support/:8:3","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"宗教 图标 代码 图标 代码 🛐 place_of_worship ⚛️ atom_symbol 🕉 om ✡️ star_of_david ☸️ wheel_of_dharma ☯️ yin_yang ✝️ latin_cross ☦️ orthodox_cross ☪️ star_and_crescent ☮️ peace_symbol 🕎 menorah 🔯 six_pointed_star ","date":"2019-10-01","objectID":"/emoji-support/:8:4","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"生肖 图标 代码 图标 代码 ♈ aries ♉ taurus ♊ gemini ♋ cancer ♌ leo ♍ virgo ♎ libra ♏ scorpius ♐ sagittarius ♑ capricorn ♒ aquarius ♓ pisces ⛎ ophiuchus ","date":"2019-10-01","objectID":"/emoji-support/:8:5","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"影像符号 图标 代码 图标 代码 🔀 twisted_rightwards_arrows 🔁 repeat 🔂 repeat_one ▶️ arrow_forward ⏩ fast_forward ⏭ next_track_button ⏯ play_or_pause_button ◀️ arrow_backward ⏪ rewind ⏮️ previous_track_button 🔼 arrow_up_small ⏫ arrow_double_up 🔽 arrow_down_small ⏬ arrow_double_down ⏸ pause_button ⏹ stop_button ⏺ record_button 🎦 cinema 🔅 low_brightness 🔆 high_brightness 📶 signal_strength 📳 vibration_mode 📴 mobile_phone_off ","date":"2019-10-01","objectID":"/emoji-support/:8:6","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"数学 图标 代码 图标 代码 ✖️ heavy_multiplication_x ➕ heavy_plus_sign ➖ heavy_minus_sign ➗ heavy_division_sign ","date":"2019-10-01","objectID":"/emoji-support/:8:7","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"标点符号 图标 代码 图标 代码 ‼️ bangbang ⁉️ interrobang ❓ question ❔ grey_question ❕ grey_exclamation ❗ exclamation heavy_exclamation_mark 〰️ wavy_dash ","date":"2019-10-01","objectID":"/emoji-support/:8:8","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"货币 图标 代码 图标 代码 💱 currency_exchange 💲 heavy_dollar_sign ","date":"2019-10-01","objectID":"/emoji-support/:8:9","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"按键符号 图标 代码 图标 代码 #️⃣ hash *️⃣ asterisk 0️⃣ zero 1️⃣ one 2️⃣ two 3️⃣ three 4️⃣ four 5️⃣ five 6️⃣ six 7️⃣ seven 8️⃣ eight 9️⃣ nine 🔟 keycap_ten ","date":"2019-10-01","objectID":"/emoji-support/:8:10","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"字母符号 图标 代码 图标 代码 🔠 capital_abcd 🔡 abcd 🔢 1234 🔣 symbols 🔤 abc 🅰️ a 🆎 ab 🅱️ b 🆑 cl 🆒 cool 🆓 free ℹ️ information_source 🆔 id ⓜ️ m 🆕 new 🆖 ng 🅾️ o2 🆗 ok 🅿️ parking 🆘 sos 🆙 up 🆚 vs 🈁 koko 🈂️ sa 🈷️ u6708 🈶 u6709 🈯 u6307 🉐 ideograph_advantage 🈹 u5272 🈚 u7121 🈲 u7981 🉑 accept 🈸 u7533 🈴 u5408 🈳 u7a7a ㊗️ congratulations ㊙️ secret 🈺 u55b6 🈵 u6e80 ","date":"2019-10-01","objectID":"/emoji-support/:8:11","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"几何符号 图标 代码 图标 代码 🔴 red_circle 🔵 large_blue_circle ⚫ black_circle ⚪ white_circle ⬛ black_large_square ⬜ white_large_square ◼️ black_medium_square ◻️ white_medium_square ◾ black_medium_small_square ◽ white_medium_small_square ▪️ black_small_square ▫️ white_small_square 🔶 large_orange_diamond 🔷 large_blue_diamond 🔸 small_orange_diamond 🔹 small_blue_diamond 🔺 small_red_triangle 🔻 small_red_triangle_down 💠 diamond_shape_with_a_dot_inside 🔘 radio_button 🔳 white_square_button 🔲 black_square_button ","date":"2019-10-01","objectID":"/emoji-support/:8:12","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"其它符合 图标 代码 图标 代码 ♻️ recycle ⚜️ fleur_de_lis 🔱 trident 📛 name_badge 🔰 beginner ⭕ o ✅ white_check_mark ☑️ ballot_box_with_check ✔️ heavy_check_mark ❌ x ❎ negative_squared_cross_mark ➰ curly_loop ➿ loop 〽️ part_alternation_mark ✳️ eight_spoked_asterisk ✴️ eight_pointed_black_star ❇️ sparkle ©️ copyright ®️ registered ™️ tm ","date":"2019-10-01","objectID":"/emoji-support/:8:13","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"旗帜 ","date":"2019-10-01","objectID":"/emoji-support/:9:0","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"常用旗帜 图标 代码 图标 代码 🏁 checkered_flag 🚩 triangular_flag_on_post 🎌 crossed_flags 🏴 black_flag 🏳 white_flag 🏳️‍🌈 rainbow_flag ","date":"2019-10-01","objectID":"/emoji-support/:9:1","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"国家和地区旗帜 图标 代码 图标 代码 🇦🇩 andorra 🇦🇪 united_arab_emirates 🇦🇫 afghanistan 🇦🇬 antigua_barbuda 🇦🇮 anguilla 🇦🇱 albania 🇦🇲 armenia 🇦🇴 angola 🇦🇶 antarctica 🇦🇷 argentina 🇦🇸 american_samoa 🇦🇹 austria 🇦🇺 australia 🇦🇼 aruba 🇦🇽 aland_islands 🇦🇿 azerbaijan 🇧🇦 bosnia_herzegovina 🇧🇧 barbados 🇧🇩 bangladesh 🇧🇪 belgium 🇧🇫 burkina_faso 🇧🇬 bulgaria 🇧🇭 bahrain 🇧🇮 burundi 🇧🇯 benin 🇧🇱 st_barthelemy 🇧🇲 bermuda 🇧🇳 brunei 🇧🇴 bolivia 🇧🇶 caribbean_netherlands 🇧🇷 brazil 🇧🇸 bahamas 🇧🇹 bhutan 🇧🇼 botswana 🇧🇾 belarus 🇧🇿 belize 🇨🇦 canada 🇨🇨 cocos_islands 🇨🇩 congo_kinshasa 🇨🇫 central_african_republic 🇨🇬 congo_brazzaville 🇨🇭 switzerland 🇨🇮 cote_divoire 🇨🇰 cook_islands 🇨🇱 chile 🇨🇲 cameroon 🇨🇳 cn 🇨🇴 colombia 🇨🇷 costa_rica 🇨🇺 cuba 🇨🇻 cape_verde 🇨🇼 curacao 🇨🇽 christmas_island 🇨🇾 cyprus 🇨🇿 czech_republic 🇩🇪 de 🇩🇯 djibouti 🇩🇰 denmark 🇩🇲 dominica 🇩🇴 dominican_republic 🇩🇿 algeria 🇪🇨 ecuador 🇪🇪 estonia 🇪🇬 egypt 🇪🇭 western_sahara 🇪🇷 eritrea 🇪🇸 es 🇪🇹 ethiopia 🇪🇺 eu european_union 🇫🇮 finland 🇫🇯 fiji 🇫🇰 falkland_islands 🇫🇲 micronesia 🇫🇴 faroe_islands 🇫🇷 fr 🇬🇦 gabon 🇬🇧 gb uk 🇬🇩 grenada 🇬🇪 georgia 🇬🇫 french_guiana 🇬🇬 guernsey 🇬🇭 ghana 🇬🇮 gibraltar 🇬🇱 greenland 🇬🇲 gambia 🇬🇳 guinea 🇬🇵 guadeloupe 🇬🇶 equatorial_guinea 🇬🇷 greece 🇬🇸 south_georgia_south_sandwich_islands 🇬🇹 guatemala 🇬🇺 guam 🇬🇼 guinea_bissau 🇬🇾 guyana 🇭🇰 hong_kong 🇭🇳 honduras 🇭🇷 croatia 🇭🇹 haiti 🇭🇺 hungary 🇮🇨 canary_islands 🇮🇩 indonesia 🇮🇪 ireland 🇮🇱 israel 🇮🇲 isle_of_man 🇮🇳 india 🇮🇴 british_indian_ocean_territory 🇮🇶 iraq 🇮🇷 iran 🇮🇸 iceland 🇮🇹 it 🇯🇪 jersey 🇯🇲 jamaica 🇯🇴 jordan 🇯🇵 jp 🇰🇪 kenya 🇰🇬 kyrgyzstan 🇰🇭 cambodia 🇰🇮 kiribati 🇰🇲 comoros 🇰🇳 st_kitts_nevis 🇰🇵 north_korea 🇰🇷 kr 🇰🇼 kuwait 🇰🇾 cayman_islands 🇰🇿 kazakhstan 🇱🇦 laos 🇱🇧 lebanon 🇱🇨 st_lucia 🇱🇮 liechtenstein 🇱🇰 sri_lanka 🇱🇷 liberia 🇱🇸 lesotho 🇱🇹 lithuania 🇱🇺 luxembourg 🇱🇻 latvia 🇱🇾 libya 🇲🇦 morocco 🇲🇨 monaco 🇲🇩 moldova 🇲🇪 montenegro 🇲🇬 madagascar 🇲🇭 marshall_islands 🇲🇰 macedonia 🇲🇱 mali 🇲🇲 myanmar 🇲🇳 mongolia 🇲🇴 macau 🇲🇵 northern_mariana_islands 🇲🇶 martinique 🇲🇷 mauritania 🇲🇸 montserrat 🇲🇹 malta 🇲🇺 mauritius 🇲🇻 maldives 🇲🇼 malawi 🇲🇽 mexico 🇲🇾 malaysia 🇲🇿 mozambique 🇳🇦 namibia 🇳🇨 new_caledonia 🇳🇪 niger 🇳🇫 norfolk_island 🇳🇬 nigeria 🇳🇮 nicaragua 🇳🇱 netherlands 🇳🇴 norway 🇳🇵 nepal 🇳🇷 nauru 🇳🇺 niue 🇳🇿 new_zealand 🇴🇲 oman 🇵🇦 panama 🇵🇪 peru 🇵🇫 french_polynesia 🇵🇬 papua_new_guinea 🇵🇭 philippines 🇵🇰 pakistan 🇵🇱 poland 🇵🇲 st_pierre_miquelon 🇵🇳 pitcairn_islands 🇵🇷 puerto_rico 🇵🇸 palestinian_territories 🇵🇹 portugal 🇵🇼 palau 🇵🇾 paraguay 🇶🇦 qatar 🇷🇪 reunion 🇷🇴 romania 🇷🇸 serbia 🇷🇺 ru 🇷🇼 rwanda 🇸🇦 saudi_arabia 🇸🇧 solomon_islands 🇸🇨 seychelles 🇸🇩 sudan 🇸🇪 sweden 🇸🇬 singapore 🇸🇭 st_helena 🇸🇮 slovenia 🇸🇰 slovakia 🇸🇱 sierra_leone 🇸🇲 san_marino 🇸🇳 senegal 🇸🇴 somalia 🇸🇷 suriname 🇸🇸 south_sudan 🇸🇹 sao_tome_principe 🇸🇻 el_salvador 🇸🇽 sint_maarten 🇸🇾 syria 🇸🇿 swaziland 🇹🇨 turks_caicos_islands 🇹🇩 chad 🇹🇫 french_southern_territories 🇹🇬 togo 🇹🇭 thailand 🇹🇯 tajikistan 🇹🇰 tokelau 🇹🇱 timor_leste 🇹🇲 turkmenistan 🇹🇳 tunisia 🇹🇴 tonga 🇹🇷 tr 🇹🇹 trinidad_tobago 🇹🇻 tuvalu 🇹🇼 taiwan 🇹🇿 tanzania 🇺🇦 ukraine 🇺🇬 uganda 🇺🇸 us 🇺🇾 uruguay 🇺🇿 uzbekistan 🇻🇦 vatican_city 🇻🇨 st_vincent_grenadines 🇻🇪 venezuela 🇻🇬 british_virgin_islands 🇻🇮 us_virgin_islands 🇻🇳 vietnam 🇻🇺 vanuatu 🇼🇫 wallis_futuna 🇼🇸 samoa 🇽🇰 kosovo 🇾🇪 yemen 🇾🇹 mayotte 🇿🇦 south_africa 🇿🇲 zambia 🇿🇼 zimbabwe ","date":"2019-10-01","objectID":"/emoji-support/:9:2","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":null,"content":"关于 Ouke","date":"2019-08-02","objectID":"/about/","tags":null,"title":"关于 我","uri":"/about/"}]